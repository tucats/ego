package commands

import (
	"fmt"
	"io/ioutil"
	"path"
	"strings"

	"github.com/tucats/ego/app-cli/settings"
	"github.com/tucats/ego/app-cli/ui"
	"github.com/tucats/ego/defs"
)

const (
	topicsKey = "topics"
	introKey  = "introduction"
	debugKey  = "-d"
	helpKey   = "help"

	// Tag in the help file to introduce each topic. Note required trailing space.
	topicTag = ".topic "

	// Name of the help text file, located in the EGO_PATH location.
	helpFileName = "help.txt"
)

func help(keys []string) {
	//
	cleanKeys := make([]string, 0)

	for n, key := range keys {
		if n == 0 && key == helpKey {
			continue
		}

		if len(strings.TrimSpace(key)) > 0 {
			cleanKeys = append(cleanKeys, strings.TrimSuffix(key, "\n"))
		}
	}

	debugState := ui.LoggerIsActive(ui.DebugLogger)

	// If the first token is "-d" then we temporarily enable DEBUG logging
	// mode, to capture any messages generated by Help.
	if len(cleanKeys) > 0 && cleanKeys[0] == debugKey {
		ui.SetLogger(ui.DebugLogger, true)

		cleanKeys = cleanKeys[1:]
	}

	if len(cleanKeys) == 0 {
		cleanKeys = []string{introKey}
	}

	printHelp(cleanKeys)

	ui.SetLogger(ui.DebugLogger, debugState)
}

func printHelp(keys []string) {
	fn := path.Join(settings.Get(defs.EgoPathSetting), helpFileName)

	b, err := ioutil.ReadFile(fn)
	if err != nil {
		fmt.Println("Help unavailable (unable to read help text file)")
		ui.Debug(ui.DebugLogger, "Help error: %v", err)

		return
	}

	lines := strings.Split(string(b), "\n")
	topic := strings.Join(keys, ".")

	ui.Debug(ui.DebugLogger, "Help key: %s", topic)

	printing := false
	subtopicHeadings := false
	heading := "Additional topics:"

	if topic == topicsKey {
		printing = true
		topic = ""
		heading = "Help topics:"
	}

	for _, line := range lines {
		if strings.HasPrefix(line, "#") {
			continue
		}

		if line == topicTag+topic {
			printing = true

			continue
		} else if printing && len(line) > 7 && line[0:len(topicTag)] == topicTag {
			// If a subtopic, list it
			if strings.HasPrefix(line, topicTag+topic) {
				// If it is a sub=topic and we are doing the top-level topics
				// listing, then skip this entry.
				if topic == "" && strings.Contains(line[1:], ".") {
					continue
				}

				// Have we put out the helpful heading yet?
				if !subtopicHeadings {
					fmt.Printf("\n%s\n", heading)
					subtopicHeadings = true
				}

				subtopic := strings.ReplaceAll(strings.TrimPrefix(line, topicTag), ".", " ")
				fmt.Printf("  %s\n", subtopic)

				continue
			}

			if subtopicHeadings {
				fmt.Println()
			}

			return
		}

		if printing && !subtopicHeadings {
			fmt.Println(line)
		}
	}

	if !printing {
		fmt.Println("Help topic not found")
	}
}
