@test "cipher: token functions"

import (
    "cipher"
    "time"
)


// Simple test of storing user data
{
	msg := "hidden message"
	t := cipher.New(msg)
	@assert T.True(cipher.Validate(t),            "token is not valid")
	@assert T.Equal(cipher.Extract(t).Name, msg,  "token does not contain expected user data")
}

{
	msg := "hidden message"
	t := cipher.New(msg) + "00"

	// Cannot validate the token because it has been modified (appended "00")
	@assert T.False(cipher.Validate(t), "token is not invalid")
}
{
	// Verify that the token's validation timeout works. Start by getting the
	// timeout value so we can restore it later.
	const TokenExpirationSetting = "ego.server.token.expiration"
	td := profile.Get(TokenExpirationSetting)
	if td == "" {
		td = "5m"
	}

	// Set the validation timeout to a tenth of second.
	profile.Set(TokenExpirationSetting, ".1s")

	// Make a new token, then sleep for two tenths of a second, which 
	// should result in the token being invalid (because it aged out).
	t := cipher.New("test")
	sec := time.ParseDuration(".2s")
	time.Sleep(sec)
	@assert T.False(cipher.Validate(t), "token is not invalid")

	// Put the timeout value back to where you found it...
	profile.Set(TokenExpirationSetting, td)
}

