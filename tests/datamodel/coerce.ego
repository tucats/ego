@test "datamodel: type coercions"

// Note the slightly cumbersome use of a switch statement to
// unwrap a value -- required when strict type checking is
// enabled, otherwise it would "just work"
{

    func f_byte( x interface{} ) byte  {
      switch actual := x.(type) {
      default: 
         return byte(actual)
      }
    }

    @assert reflect.Type(f_byte(int(42))) == byte
    @assert reflect.Type(f_byte(int32(42))) == byte
    @assert reflect.Type(f_byte(int64(42))) == byte
    @assert reflect.Type(f_byte(float32(42))) == byte
    @assert reflect.Type(f_byte(float64(42))) == byte


    func f_int( x interface{} ) int  {
      switch actual := x.(type) {
         default: 
            return int(actual)
         }
       }

    @assert reflect.Type(f_int(int(42))) == int
    @assert reflect.Type(f_int(int32(42))) == int
    @assert reflect.Type(f_int(int64(42))) == int
    @assert reflect.Type(f_int(float32(42))) == int
    @assert reflect.Type(f_int(float64(42))) == int

    func f_int32( x interface{} ) int32  {
      switch actual := x.(type) {
         default: 
            return int32(actual)
      }
    }
    
    @assert reflect.Type(f_int32(int(42))) == int32
    @assert reflect.Type(f_int32(int32(42))) == int32
    @assert reflect.Type(f_int32(int64(42))) == int32
    @assert reflect.Type(f_int32(float32(42))) == int32
    @assert reflect.Type(f_int32(float64(42))) == int32

    func f_int64( x interface{} ) int64  {
      switch actual := x.(type) {
         default: 
            return int64(actual)
         }
       }
    
    @assert reflect.Type(f_int64(int(42))) == int64
    @assert reflect.Type(f_int64(int32(42))) == int64
    @assert reflect.Type(f_int64(int64(42))) == int64
    @assert reflect.Type(f_int64(float32(42))) == int64
    @assert reflect.Type(f_int64(float64(42))) == int64

    func f_float32( x interface{} ) float32  {
      switch actual := x.(type) {
         default: 
            return float32(actual)
         }
       }
    
    @assert reflect.Type(f_float32(int(42))) == float32
    @assert reflect.Type(f_float32(int32(42))) == float32
    @assert reflect.Type(f_float32(int64(42))) == float32
    @assert reflect.Type(f_float32(float32(42))) == float32
    @assert reflect.Type(f_float32(float64(42))) == float32

    func f_float64( x interface{} ) float64  {
      switch actual := x.(type) {
         default: 
            return float64(actual)
         }
       }   
    
    @assert reflect.Type(f_float64(int(42))) == float64
    @assert reflect.Type(f_float64(int32(42))) == float64
    @assert reflect.Type(f_float64(int64(42))) == float64
    @assert reflect.Type(f_float64(float32(42))) == float64
    @assert reflect.Type(f_float64(float64(42))) == float64


}

@pass