
@test "packages: json"

{
    anon := {age:55, name:"Tom"}
    s := json.MarshalIndent(anon, "", "  ")


    // This test is sensitive to formatting, particularly on a Windows
    // system. So normalize the match by removing any CR characters 
    // before testing the strings.
    st :=string(s)
    match := `{
  "age": 55,
  "name": "Tom"
}`

    st = strings.ReplaceAll(string(s), "\r", "")
    match = strings.ReplaceAll(match, "\r", "")

    @assert st == match 

    s = json.Marshal(anon)
    @assert string(s) == `{"age":55,"name":"Tom"}`

    // Verify that the unmarshal will overwrite existing values.
    anon.age = -1
    anon.name = "aka"

    e := json.Unmarshal(s, &anon)
    if e != nil {
        fmt.Println("Error: ", e)
    }

    @assert anon == {age:55, name:"Tom"}

    // Same string but restore as a map
    m := map[string]interface{}{}

    e = json.Unmarshal(s, &m)
    if e != nil {
        fmt.Println("Error: ", e)
    }

    @assert reflect.Type(m) == map[string]interface{}

    // Test for the float value, because the model uses interfaces{} and
    // so json.Unmarshal unhelpfully converts unknown numeric values to
    // float64 (for safety, I guess)
    @assert m["age"] == float64(55)
    @assert m["name"] == "Tom"

    // Can we restore values into an array?
    stra := "[1, 2, 3]"
    inta := []int{}

    e = json.Unmarshal([]byte(stra), &inta)
    if e != nil {
        fmt.Println("Error: ", e)
    }
}


