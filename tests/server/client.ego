@test "server: client - verify server heartbeat"
{
	@global ServerAddr os.Hostname() + ".local"

    // Empty username in the New() call means no authentication provided.
    conn := rest.New("").Base("https://" + ServerAddr + ":443").Verify(false).Media("application/json")

    // First, lets try to see if the server is even running. If not, then
    // we'll skip all these tests.
    try {
        conn.Get("admin/heartbeat")
    } catch {
        if index(__error, "connection refused") > 0 {
            fmt.Println("Client/server tests will not be run, server unavailable")
            return
        }

        if index(__error, "no such host") > 0 {
            fmt.Println("Client/server tests will not be run, server unavailable")
            return
        }

        fmt.Println("Failed, ", __error)

        return
    }

    conn.Close()
}

@test "server: client - factorial service"
{
	// Use of empty username in New() signals no credentials provided.
    conn := rest.New("").Base("https://" + ServerAddr + ":443").Verify(false).Media("application/json")
	r := conn.Get("services/factor/10")

	@assert reflect.Type(r) == []interface{}
	@assert len(r) == 4
	@assert int(r[0]) == 1
	@assert int(r[1]) == 2
	@assert int(r[2]) == 5
	@assert int(r[3]) == 10
	
}


@test "server: client - stateless symbol test"
{
	// Use of empty username in New() signals no credentials provided.
    conn := rest.New("").Base("https://" + ServerAddr + ":443").Verify(false).Media("application/json")
	r := conn.Get("services/count")

    // Note that unless otherwise managed, numeric values are returned as float64 values
	@assert reflect.Type(r) == float64
	@assert r == 42.0

    // Call it again. The result will be unchanged if the handler is truly stateless
	r = conn.Get("services/count")
	@assert reflect.Type(r) == float64
	@assert r == 42.0

}

