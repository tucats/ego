
/* Switch statement test */

@test "flow: switch statement"

{
    x := 5

    // Select a specific single value
    switch x {
        case 1:
            @fail "Case 1 incorrectly taken"
        case 2:
            @fail  "Case 2 incorrectly taken"
        case 5:
            // Successful case
        default:
            @fail "Case default incorrectly taken"
    }

    // Select the default because no match
    x = 6
    switch x {
        case 1:
            @fail "Case 2 incorrectly taken"
        case 2:
            @fail "Case 2 incorrectly taken"
        case 5:
            @fail "Case 5 incorrectly taken"
        default:
    }

    // Select nothing because no match.
    switch x {
        case 1:
            @fail "Case 1 incorrectly taken"
        case 2:
            @fail "Case 2 incorrectly taken"
        case 5:
            @fail "Case 5 incorrectly taken"
    }

    // Conditional switch with fallthrough. Must hit both qualified
    // conditional cases.
    i := 45
    count := 0
    switch {
    case i < 10:
        @fail "Case i<10 incorrectly taken"
        fallthrough
    case i < 50:
        count++
        fallthrough
    case i < 100:
        count++
    }
    @assert T.Equal(count, 2, "Did not fall through from case i<50")

    // Conditional switch without fallthrough, must hit only The
    // first matching case (i<50)
    i = 45
    count = 0
    switch {
    case i < 10:
        @fail "Case i<10 incorrectly taken"
    case i < 50:
        count++
    case i < 100:
        @fail "Case i<100 incorrectly taken"
    }
    @assert T.Equal(count, 1, "Did not fall through from case i<50")

}

@pass