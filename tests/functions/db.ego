@test "db connection to local postgres server"
constr := "postgres://tom:secret@homebase.local/?sslmode=disable"
d := db.New(constr)
_, e := d.Query("select 0 where 1=0")
if e != nil {
    fmt.Printf("Database not available, %v\n", e)
    @pass
    return
}
_, e := d.Execute("drop table if exists members")
@assert e == nil "drop table failed"
_, e := d.Execute("create table members(id integer, name char varying(50))")
@assert e == nil "create table failed"

names := [ "Tom", "Mary", "Sarah", "Chelsea", "Tony"]
for i := 0; i < len(names) ; i = i + 1 {
    _, e := d.Execute("insert into members values($1, $2)", 101+i, names[i])
    @assert d.rowCount == 1 "rowcount not updated correctly on insert"
    @assert e == nil "insert failed"
    @assert d.rowCount == 1 "rowcount not updated correctly on insert"
}

r, e := d.QueryResult("select * from members order by name")
@assert e == nil "select failed"
@assert len(r) == 5 "wrong number of rows returned"
@assert d.rowCount == 5 "wrong number of rows in result handle"
@assert r[0][1] == "Chelsea" "unexpected result set value(s)"

// Do a query with an argument, and in "struct" mode which returns
// structures as the result instead of arrays...
d.AsStruct(true)
r2, e := d.Query("select * from members where name = $1", "Tony")
for r2.Next() {
    info := r2.Scan()
    @assert info.name == "Tony" "incorrect name returned from query"
    @assert int(info.id) == 105 "incorrect id returned from query"
}
r2.Close()
d.Close()
@assert d.rowCount == -1 "rowcount not updated after close"

@pass
