# Messages for language "en", English

# The "ego" section contains subcommand descriptions used by the --help option
# used with CLI commands. In general, the first term of the key is the primary
# command verb, followed by a period and the optional subcommand names.

[ego]
config=Manage configurations
config.delete=Delete a key from the configuration
config.describe=Display configuration with description
config.list=List all configurations
config.remove=Delete an entire configuration
config.set=Set a configuration value
config.set.description=Set the configuration description
config.set.output=Set the default output type (text or json)
config.show=Show the current configuration
dsns=Manage data source names
dsns.add=Add a new data source name
dsns.delete=Delete a data source name
dsns.grant=Grant permissions to a user for a data source name
dsns.list=List the DSNS known to the server
dsns.revoke=Revoke permissions from a user for a data source name
dsns.show=Show permissions for a data source name
hello=Hello, {{name}}!
log=Format a JSON log file as text
logon=Log on to a remote server
path=Print the default ego path
run=Run an existing program
server=Start to accept REST calls
server.cache.flush=Flush service caches
server.cache.list=List service caches
server.cache.set.size=Set the server cache size
server.caches=Manage server caches
server.logging=Display or configure server logging
server.logon=Log on to a remote server
server.memory=Display server memory usage
server.restart=Restart an existing server
server.run=Run the rest server
server.start=Start the rest server as a detached process
server.status=Display server status
server.stop=Stop the detached rest server
server.user.create=Create a new user
server.user.delete=Delete a user
server.user.list=List all users
server.user.show=Display a single user
server.user.update=Update an existing user
server.users=Manage server user database
sql=Execute SQL in the database server
sql.file=Filename of SQL command text
sql.row-ids=Include the row UUID in any output
sql.row-numbers=Include the row number in any output
table=Operate on database tables
table.create=Create a new table
table.delete=Delete rows from a table
table.drop=Delete one or more tables
table.grant=Set permissions for a given user and table
table.insert=Insert a row to a table
table.list=List tables
table.permission=List table permissions
table.permissions=List all table permissions (requires admin privileges)
table.read=Read contents of a table
table.show=Show table metadata
table.sql=Directly execute a SQL command
table.update=Update rows to a table
test=Run a test suite
version=Display command line version number


# The "error" section contains error message codes. In general, the key is a
# descriptive text of the functional area or language component where the error
# occurred. There is no distinction between messages generated by the compiler
# versus runtime errors.

[error]
arg.count=incorrect function argument count
arg.list=internal error: invalid local function argument list
arg.type=incorrect function argument type
argcheck.array=invalid ArgCheck array
array.bounds=array index out of bounds
array.bracket=missing array bracket
array.index=invalid array index
array.value.type=wrong array value type
assert=@assert error
assert.testing=testing @assert failure
asset=no such asset
assignment=missing '=' or ':='
auth.type=invalid authentication type
auto.import=Unable to auto-import: {{err}}
bit.shift=invalid bit shift specification
block=missing '{'
block.end=missing '}'
boolean.option=invalid boolean option value
break.clause=invalid break clause
bytecode.address=invalid bytecode address
bytecode.not.found=unimplemented bytecode instruction
cache.not.spec=cache size not specified
call.frame=invalid call frame on stack
cannot.delete.profile=cannot delete active profile
case=missing 'case'
catch=missing 'catch' clause
cert.parse=error parsing certficate file
channel.assignment=invalid use of assignment list for channel
channel.not.open=channel not open
child.timeout=no child process available to process request
circular.import=Invalid import cycle
cli.command.not.found=unrecognized command
cli.extra=unexpected text after command
cli.option=unknown command line option
cli.parms=too many parameters on command line
cli.subcommand=unexpected parameters or invalid subcommand
colon=missing ':'
column.count=incorrect number of columns
column.name=invalid column name
column.number=invalid column number
column.width=invalid column width
compiler=internal compiler error
conditional.bool=invalid conditional expression type
constant=invalid constant expression
credentials=invalid credentials
credentials.missing=no credentials provided
db.closed=database client closed
db.column.def=invalid database column definition
db.result.type=invalid result set type
db.rowset=invalid rowset value
debug.service=cannot debug non-existent service
debugger.cmd=invalid debugger command
defer.outside=defer statement invalid when used outside of a function
directive=invalid directive name
directive.mode=directive invalid for mode
div.zero=division by zero
dsn.not.found=no such data source name
dup.column=duplicate column name
dup.type=duplicate type name
empty.column=empty column list
endpoint=invalid endpoint path string
entry.not.found=undefined entrypoint name
equals=missing '='
expired=expired token
expression=missing expression
expression.term=missing term
extension=unsupported language extension
field.for.type=invalid field name for type
field.not.found=unknown structure member
file.id=invalid file identifier
file.mode=invalid file open mode
filter.term.invalid=Unrecognized operator {{term}}
filter.term.missing=missing filter term
float.value=invalid floating-point value
for.assignment=missing ':='
for.body=for{} body empty
for.exit=for{} has no exit
for.init=missing for-loop initializer
format.spec=invalid or unsupported format specification
format.type=invalid output format type
func.arg=invalid function argument
func.call=invalid function invocation
func.exists=function already defined
func.name=invalid function name
func.type.call=invalid use of struct type as function call
func.return.count=incorrect number of return values
func.unused=function call used as parameter has unused error return value
func.void=function did not return the expected number of values
function=missing function
function.body=missing function body
function.list=missing function parameter list
function.name=missing function name
function.ptr=unable to convert {{ptr}} to function pointer
function.receiver=no function receiver
function.return=missing function return type
function.values=missing return values
general=general error
go.error=Go routine {{name}}, thread {{id}} failed: {{err}}
http=received HTTP
host.unreachable=cannot connect to host
identifier=invalid identifier
identifier.not.found=unknown identifier
immutable.array=cannot change an immutable array
immutable.map=cannot change an immutable map
import=import not permitted inside a block or loop
import.not.found=attempt to use imported package not in package cache
initializer.count=incorrect number of initialization values
instruction=invalid instruction
integer.value=invalid integer value
interface.imp=missing interface implementation
invalid.alignment.spec=invalid alignment specification
invalid.auto=invalid use of auto increment/decrement operation
invalid.blockquote=invalid block quote
invalid.cache.item=internal error; invalid cache item type
invalid.catch.set=invalid catch set {{index}}
invalid.duration=invalid duration string
invalid.filter=invalid SQL filter
invalid.named.return.values=Invalid use of named and non-named return values
invalid.struct.or.package=invalid structure or package
invalid.unwrap=invalid unwrap of non-interface value
keyword.option=invalid option keyword
line.number=invalid line number
list=invalid list
logger.confict=conflicting logger state
logger.name=invalid logger name
logon.endpoint=logon endpoint not found
logon.server=no --logon-server specified
loop.control=loop control statement outside of for-loop
loop.index=invalid loop index variable
loss.of.precision=conversion results in data loss
map.key.type=wrong map key type
map.value.type=wrong map value type
media.type=invalid media type
named.return.values=return values with named return values in function definition
native.unknown.field=unknown field or method name for this object type
nil=nil pointer reference
no.database=the server is not configured with a default database connection (use a data source name)
no.info=no information for item
no.main.package=no main package found
no.permission=no permission for operation
no.symbol.table=no symbol table available
not.assignment.list=not an assignment list
not.channel=neither source or destination is a channel
not.found=not found
not.json.log=not a valid JSON log file
not.json.log.valid=Invalid JSON object at line
not.pointer=not a pointer
not.service=not running as a service
not.type=not a type
opcode.defined=opcode already defined
operand=internal error: invalid or missing bytecode operand
option.required=required option not found
option.value=missing option value
package.exists=cannot redefine existing package
package.member=unknown package member
package.name=invalid package name
package.set=internal error, invalid attempt to store a symbol in a package
package.stmt=missing package statement
panic=panic
parens=missing parenthesis
parm.count=incorrect number of parameters
parm.value.count=wrong number of parameter values
permission.name=invalid permission name
pointer.type=invalid pointer type
print.items=expected items to print not found
privilege=no privilege for operation
profile.action=invalid profile action
profile.key=no such profile key
profile.name=invalid configuration name
profile.not.found=no such profile
range=invalid range
readonly=item is read-only
readonly.addressable=cannot take address of read-only item
readonly.write=invalid attempt to modify a read-only value
request=invalid request or content
reserved.name=reserved profile setting name
rest.closed=rest client closed
return.list=invalid return type list
return.void=invalid return value for void function
roman.numeral=invalid Roman numeral
roman.range=Roman integers must be in range of 1..3999
row.number=invalid row number
rune.value=invalid rune value
sandbox.path=invalid sandbox path
scope.invalid=invalid or non-existent symbol table scope
semicolon=missing ';'
server.error=internal server error
server.not.local=Operation cannot be performed, this server is not the local server
server.running=server already running as pid
slice.index=invalid slice index
spacing=invalid spacing value
sql.injection=possible SQL injection violation
sql.name=invalid SQL name
stack.underflow=stack underflow
statement=missing statement
statement.not.found=unexpected token
step.type=invalid step type
struct=invalid struct
struct.init.tuple=attempt to initialize structure field with function that returns multiple values
struct.type=unknown structure type
symbol.exists=symbol already exists
symbol.name=invalid symbol name
symbol.not.exported=symbol not exported from package
symbol.not.found=unknown symbol
symbol.overflow=too many local symbols defined
table.closed=table closed
table.name.missing=no table name specified
table.processing=table processing
template.name=invalid template name
terminated=terminated with errors
this=invalid _this_ identifier
timer=invalid timer operation
token.encryption=invalid token encryption
token.extra=unexpected token
try.stack=try/catch stack error
tx.actibe=transaction already active
tx.not.active=no transaction active
tx.not.found=no such transaction symbol
type=invalid or unsupported data type for this operation
type.check=invalid @type keyword
type.def=missing type definition
type.mismatch=type mismatch
type.name=invalid type name
type.not.found=no such type
type.operation=invalid type for this operation
type.spec=invalid type specification
unsupported.on.os=command not implemented for this operating system
url=invalid URL path specification
url.not.found=URL not found
user.count=incorrect number of users updated by request
user.defined=user-supplied error
user.not.found=no such user
value=invalid value
value.extra=unexpected value
var.args=invalid variable-argument operation
var.type=invalid type for this variable
var.unused=variable created but never used
version.parse=Unable to process version number {{v}; count={{c}}, err={{err}


# The "help" section contains help text used within the internal Ego debugger.
# These are generated when the "help" command is issued within the debugger.

[help]
break.at=Halt execution at a given line number
break.clear=Remove breakpoint for line number
break.clear.when=Remove breakpoint for expression
break.load=Load breakpoints from named file
break.save=Save breakpoint list to named file
break.when=Halt execution when expression is true
continue=Resume execution of the program
exit=Exit the debugger
help=Display this help text
print=Print the value of an expression
set=Set a variable to a value
show.breaks=Display list of breakpoints
show.calls=Display the call stack to the given depth
show.line=Display the current program line
show.scope=Display nested call scope
show.source=Display source of current module
show.symbols=Display the current symbol table
step=Execute the next line of the program
step.over=Step over a function call to the next line in this program
step.return=Execute until the next return operation

# The "label" section contains the text used to label various output fields
# in a language-specific way. This most often refers to the output of built-in
# commands when generating text output (as opposed to json output).

[label]
Active=Active
argument=argument {{position}}
Columns=Columns
Command=Command
Commands=Commands
Default.configuration=Default configuration
Description=Description
Error=Error
Field=Field
ID=ID
Key=Key
Logger=Logger
Member=Member
memory.item=Item
memory.value=Value
memory.Total=Cumulative bytes allocated
memory.Current=Current heap size
memory.System=Memory allocated from system
memory.Stack=Current stack space
memory.Objects=Number of objects in heap
memory.GC=Garbage collection cycles
Name=Name
Nullable=Nullable
Parameters=Parameters
Permissions=Permissions
Row=Row
Rows=Rows
Schema=Schema
Size=Size
Table=Table
Type=Type
Unique=Unique
Usage=Usage
User=User
Value=Value
Version=Version
Present=Present
active.loggers=Active loggers: 
break.at=Break at
command=command
configuration=configuration
debug.commands=Debugger commands:
had.default.verb=(*) indicates the default subcommand if none given
logs.disabled=Disabled
logs.enabled=Enabled
options=options
parameter=parameter
parameters=parameters
password.prompt=Password: 
since=since
stepped.to=Step to
symbols=symbols
username.prompt=Username: 
version=version


# The "msg" section contains messages used by the CLI commands. These are non-error
# messages that are used to provide feedback to the user.

[msg]
config.deleted=Configuration {{name}} deleted
config.version=Configuration profile version {{version}}
config.written=Configuration key {{key}} set to {{value}}
debug.break.added=Added break {{break}}
debug.break.exists=Breakpoint already set
debug.error=Debugger error, {{err}}
debug.load.count=Loaded {{count}} breakpoints
debug.no.breakpoints=No breakpoints defined
debug.no.source=No source available for debugging
debug.return=Return from entrypoint
debug.save.count=Saving {{count}} breakpoints
debug.scope=Symbol table scope:
debug.start=Start program with call to entrypoint {{name}}()
dsns.added=Created new data source name: {{name}}
dsns.deleted=Deleted existing data source name: {{name}}
dsns.permissions=User permissions for data source name {{name}}
dsns.show.empty=Data source name {{name}} does not have permissions
enter.blank.line=Enter a blank line to terminate command input
logged.in=Successfully logged in as {{user}}, valid until {{expires}}
rest.waiting=Waiting for response from {{URL}}
server.cache=Server Cache, hostname {{host}}, ID {{id}}
server.cache.assets=There are {{count}} HTML assets in cache, for a total size of {{size}} bytes.
server.cache.emptied=Server cache emptied
server.cache.no.assets=There are no HTML assets cached.
server.cache.no.services=There are no service items in cache. The maximum cache size is {{limit}} items.
server.cache.one.asset=There is 1 HTML asset in cache, for a total size of {{size}} bytes.
server.cache.one.service=There is 1 service item in cache. The maximum cache size is {{limit}} items.
server.cache.services=There are {{count}} service items in cache. The maximum cache size is {{limit}} items.
server.cache.updated=Server cache size updated
server.logs.file=Server log file is {{name}}
server.log.id=*** Starting new log, ID {{id}}
server.logs.no.retain=Server does not retain previous log files
server.logs.purged=Purged {{count}} old log files
server.logs.retains=Server also retains last {{count}} previous log files
server.logs.status=Logging status, hostname {{host}}, ID {{id}}
server.memory=Server memory status, hostname {{host}}, ID {{id}}
server.not.running=Server not running
server.started=Server started as process {{pid}}
server.status=Ego {{version}}, pid {{pid}}, host {{host}}, session {{id}}
server.stopped=Server (pid {{pid}}) stopped
server.stopped.rest=Server stopped
server.stopping=Server stopping, status {{status}}
table.created=Created table {{name}} with {{count}} columns
table.delete.count=Deleted {{count}} tables
table.deleted=Table {{name}} deleted
table.deleted.no.rows=No rows deleted
table.deleted.rows={{count}} rows deleted
table.empty.rowset=No rows in result
table.insert.count=Added {{count}} rows to table {{name}}
table.no.insert=Nothing to insert into table
table.sql.no.rows=No rows modified
table.sql.one.row=1 row modified
table.sql.rows={{count}} rows modified
table.update.count=Updated {{count}} rows in table {{name}}
table.user.permissions=User {{user}} permissions for {{schema}}.{{table}} {{verb}}: {{perms|list|empty none}}
user.added=User {{user}} added
user.deleted=User {{user}} deleted
user.show=User "{{user}}" {{action}}
user.show.noperms=User "{{user}}" has no permissions


# The "opt" section contains option descriptions used by the --help option
# used with CLI commands. In general, the first term of the key is the primary
# subcommand.

[opt]
address.port=Specify address (and optionally port) of server
cache.list.assets=List only HTML assets in cache
cache.list.order.by=Specify order of list of cached items
cache.list.services=List only service items in cache
config.force=Do not signal error if option not found
config.verbose=Show options not found in current profile
config.version=Show version number of configuration profile
dsn=Specify the data source name
dsns.add.database=Specify database name
dsns.add.host=Specify the remote host for the database connection
dsns.add.name=Specify the name of the data source
dsns.add.native=Specify that the data source name is a native connection
dsns.add.password=Specify the password credential
dsns.add.port=Specify the port for the remote database connection
dsns.add.schema=Specify the schema name for this data source
dsns.add.secured=Specify that the connection should use SSL
dsns.add.type=Specify the data source type (provider)
dsns.add.username=Specify the username credential
dsns.grant=Grant permissions for a user to a data source name
dsns.grant.name=Name of the data source
dsns.grant.permissions=List of permission names to grant
dsns.grant.username=Username being granted permissions
dsns.revoke=Revoke permissions for a user to a data source name
dsns.revoke.name=Name of the data source name
dsns.revoke.permissions=List of permission names to revoke
dsns.revoke.username=Username being revoked permissions
filter=List of optional filter clauses
log.file=file | stdin
log.session=Filter log file by session number
log.class=Filter log file by message class
log.sequence=Filter log file based on sequence numbers
log.prefix=Filter log file by message prefix
log.id=Filter log by server UUID
log.start=Starting line number to output (default is 1)
log.limit=Number of lines to output (default is all)
global.archive-log=Name of archive for purged log files, if any
global.format=Specify text, json or indented output format
global.localization.file=File containing additional JSON localization data
global.log=Loggers to enable
global.log.format=Specify text, json, or indented log format
global.log.file=Name of file where log messages are written
global.maxcpus=Maximum number of cpus to use to schedule Go routines
global.profile=Name of profile to use
global.quiet=If specified, suppress extra messaging
global.set=Override configuration options for this invocation
global.version=Show version number of command line tool
help.text=Show this help text
insecure=Do not require X509 server certificate verification
insecure.port=Specify insecure port number to redirect to secure port
limit=If specified, limit the result set to this many rows
local=Show local server status info
logon.expiration=Requested expiration time for the logon token
logon.server=URL of server to authenticate with
new.token=Generate new server token
password=Password for logon
port=Specify port number of server
run.auto.import=Override auto-import configuration setting
run.debug=Run with interactive debugger
run.disasm=Display a disassembly of the bytecode before execution
run.entry.point=Name of entrypoint function (defaults to main)
run.log=Direct log output to this file instead of stdout
run.optimize=Enable bytecode optimizer
run.profile=Enable Ego source code profiling
run.project=Source is a directory instead of a file
run.static=Specify value typing during program execution
run.symbols=Display symbol table
scope=Blocks can access any symbol in call stack
server.auth.server=Host providing authentication services (defaults to self)
server.delete.user=Username to delete
server.logging.disable=List of loggers to disable
server.logging.enable=List of loggers to enable
server.logging.file=Show only the active log file name
server.logging.keep=Specify how many log files to keep
server.logging.session=Limit display to log entries for this session number
server.logging.status=Display the state of each logger
server.memory.megabytes=Display memory values as megabytes
server.run.cache=Number of service programs to cache in memory
server.run.certs=Directory to locate HTTPS certificate and key files
server.run.child.services=Use child processes to execute services instead of threaads
server.run.debug=Service endpoint to debug
server.run.force=If set, override existing PID file
server.run.is.detached=If set, server assumes it is already detached
server.run.keep=The number of log files to keep
server.run.log=File path of server log
server.run.no.log=Suppress server log
server.run.not.secure=If set, use HTTP instead of HTTPS
server.run.realm=Name of authentication realm
server.run.sandbox=File path of sandboxed area for file I/O
server.run.static=Specify value typing during service execution
server.run.superuser=Designate this user as a super-user with ROOT privileges
server.run.users=File with authentication JSON data
server.run.uuid=Sets the optional session UUID value
server.show.id=Display the UUID of each user
server.stop.force=Force the server to stop (on local machine) even if not authorized 
server.user.pass=Password to assign to user
server.user.perms=Permissions to grant to user
server.user.user=Username to create or update
sql.file=Filename of SQL command text
sql.row.ids=Include the row UUID in the output
sql.row.numbers=Include the row number in the output
start=If specified, start result set at this row
symbol.allocation=Allocation size (in symbols) when expanding storage for a symbol table 
table.create.file=File name containing JSON column info
table.delete.filter=Filter for rows to delete. If not specified, all rows are deleted
table.grant.permission=Permissions to set for this table updated
table.grant.user=User (if other than current user) to update
table.insert.file=File name containing JSON row info
table.list.no.row.counts=If specified, listing does not include row counts
table.permission.user=User (if other than current user) to list)
table.permissions.user=If specified, list only this user
table.read.columns=List of columns to display; default is all columns
table.read.order.by=List of optional columns use to sort output
table.read.row.ids=Include the row UUID column in the output
table.read.row.numbers=Include the row number in the output
table.update.filter=Filter for rows to update. If not specified, all rows are updated
trace=Display trace of bytecode execution
username=Username for logon
verbose=Display additional information


# The "config" section contains configuration descriptions used by the config
# describe command.

[config.ego]
application.server=URL of the application server. If not specified, use logon server
compiler.extensions=Support language extensions
compiler.full.stack=Display full stack contents during trace logging
compiler.import=Automatically import common packages
compiler.normalized=Symbol names are case-insensitive
compiler.optimize=Enable bytecode optimizer
compiler.types=Specify strict, relaxed, or dynamic types
compiler.unused.var.error=If true, variables created or set but not read are an error
compiler.var.usage.logging=If true, include COMPILER log messages for variable usage
console.format=Specify output format of text, json, or indented
console.log=Specify log format of text, json, or indented
console.no.copyright=Suppress the copyright message
console.exit.on.blank=If true, exit REPL mode on a blank line
console.output=Specify output destination of stdout or file
console.readline=Specify if the Unix-style readline package is used
log.archive=Name of archive zip file for purged log files, if any
log.retain=Number of log files to retain before purging
log.timestamp=Timestamp format string for log messages
logon.server=URL of server to authenticate with
logon.token=Current logon token
logon.token.expiration=When the current logon token will expire
runtime.deep.scope=If true, all symbol tables in scope are visible
runtime.exec=If true, allow os.Exec() operations
runtime.panics=If true, panic() causes Ego to panic
runtime.path=The current EGO_PATH value
runtime.path.lib=The location of the lib directory. Defaults to EGO_PATH
runtime.precision.error=If true, conversions that result in data loss are an error
runtime.rest.errors=If true, REST API errors are returned as runtime errors
runtime.rest.server.cert=Location of the server CERT file
runtime.rest.timeout=When present, duration of REST timeout Value
runtime.sandbox.path=Root path for sandboxed I/O
runtime.stack.trace=If true, show partial stack contents during trace
runtime.symbol.allocation=Default allocation size of symbol table extensions
runtime.unchecked.errors=If true, unchecked errors are returned as runtime errors
server.cache.size=Number of service programs to cache in memory
server.child.services=Use child processes to execute services instead of threads
server.child.services.limit=Maximum number of child services to run simultaneously
server.child.services.retain=If true, keep child service payload files after service ends
server.child.services.dir=Location for transient request and response files (default is /tmp)
server.database.credentials=Credentials to use with default databse connection
server.database.name=Name for default database connection
server.database.empty.filter.error=If true, empty filter values are treated as errors
server.database.empty.rowset.error=If true, empty rowset values are treated as errors
server.database.partial.insert.error=If true, partial inserts are treated as errors
server.database.ssl=If true, use SSL for remote database connections
server.database.url=URL of the default database server, if specified
server.superuser=The username:password to create as the default admin account
server.default.logging=Default logging classes to enable when starting server
server.default.credential=Default username:password to configure server
server.insecure=If true, server does not accept HTTPS connections
server.piddir=Directory where server PID files are stored
server.retain.log.count=Number of log files to retain before purging
server.report.fqdn=If true, report fully qualified server name in REST responses
server.token.expiration=Default expiration value applied to auth tokens
server.token.key=Generated random key encryption value used by server operations
server.userdata=File or database URL of the credentials database
server.userdata.key=The encryption key for the userdata file if stored as text
table.autoparse.dsn=If true, multipart names are assumed to be the dsn and table
table.default.dsn=The default data source name to use with tables commands

# The "parm" section contains parameter descriptions used by the --help option to
# describe command line parameters that can be added to a command or subcommand.

[parm]
address.port=address:port
config.key.value=key=value
file=file
file.or.path=file or path
key=key
name=name
sql.text=sql-text
table.create=table-name column:type [column:type...]
table.insert=table-name [column=value...]
table.name=table-name
table.update=table-name column=value [column=value...]

# The "log" section is for logging messages. The first two messages
# are used for Go unit testing purposes.

[log]
test.test1=Test message1 {{path}}
test.test2=Test message2
test.test3=[{{session}}] test session {{path}}

app.console.enable=Console output set to {{flag}}
app.console.pipe=Console pipe: {{flag}}
app.env.load=Loaded {{count}} settings from environment variables
app.maxcpus=Set max cpus to {{count}}
app.set.invalid=Invalid --set operation: {{item}}, {{error}}
app.invalid.value=Invalid value for {{item}}: {{value}}
app.using.profile=Using profile {{name}}
app.pager.pagelets=There are {{count}} pagelets
app.pager.lines=There are {{count}} lines in each pagelet
app.pager.blocksize=Each print block is {{count}} lines
app.table.column.order=Print column order: {{columns|list}}
app.help=Using help file {{path}}, language "{{language}}"
app.help.key=Using help key {{key}}
app.help.error=Help error: {{error}}
app.new.server.token=Generated new server token {{token}} for profile "{{profile}}"
app.localization.load=Loaded {{count}} additional localizations from {{file}}


asset.init=Initialized asset cache; max size {{size}}
asset.init.session=Initialized asset cache; max size {{size}}
asset.loaded=[{{session}}] Asset loaded from cache: {{path}}, {{size}} bytes
asset.not.found=Asset not found in cache: {{path}}
asset.too.large=Asset too large for cache; path {{path}}; size {{size}}; cache size {{max}}
asset.purged=Asset purged; path {{path}}; size {{size}}; cache size now {{newsize}}
asset.saved=Asset saved; path {{path}}; size {{size}}; cache size now {{newsize}}
asset.index=Asset path index read attempt at {{path}}
asset.relative=Asset path relative read attempt at {{path}}
asset.load.error=Asset load error reading from {{path}}, {{error}}
asset.load.local.error=Local asset load error reading from {{path}}, {{error}}
asset.read=Asset read {{size}} bytes from file {{path}}
asset.read.local=Local asset read {{size}} bytes form file {{path}}

auth.invalid.encoding=Invalid token encoded hex value, {{error}}
auth.invalid.decryption=Invalid token decryption, {{error}}
auth.invalid.json=Invalid token JSON value, {{error}}
auth.expired.token=Attempt to use expired token {{id}}
auth.valid.token=Valid token {{id}}; user {{user}}; expires {{expires}}
auth.new.token=Created token {{id}}; user {{user}}; expires {{expires}}
auth.token.error=Failed to decode token, {{error}}
auth.priv.set=Setting {{priv}} privilege for user "{{user}}" to {{flag}}
auth.no.priv=User "{{user}}" does not have {{priv}} privilege
auth.file.size=Using file-system credential store with {{size}} items
auth.default.cred=Using default credentials {{user}}:{{pass}}
auth.user.update=Updated user {{user}}
auth.user.create=Created user {{user}}
auth.user.delete=Deleted user {{user}}
auth.user.not.found=No credential found for {{user}}
auth.flush=Flushed authorization data store
auth.db=Database credential store {{constr}}
auth.proxy.expire=Removing {{count}} expired proxy user records
auth.dsn.memory=Creating new empty DSN table in memory
auth.dsn.update=Updated dsn {{name}}
auth.dsn.create=Created dsn {{name}}
auth.dsn.delete=Deleted dsn {{name}}
auth.dsn.flush=Flushed dsn to backing store
auth.dsn.db=Database DSN store {{constr}}
auth.dsn.not.found=No dsn record for {{name}}
auth.dsn.found=Found DSN record for {{name}}
auth.dsn.mask=DSN authorized action mask value {{mask}}
auth.dsn.restrict=DSN {{name}} marked as restricted
auth.dsn.init=Initializing data source names
auth.error=Unexpected error, {{error}}
auth.token.max.expire=Requested duration exceeds allowed max {{duration}}
auth.bad.media=Unsupported media type 
auth.invalid.expiration.duration=Invalid expiration {{duration}} ignored
auth.payload.creds=Authorization credentials found in payload
auth.expires=Session request expiration set to {{duration}}
auth.bad.payload.creds=Failed attempt to read payload credentials for user {{user}}, {{error}}
auth.no.creds=No authentication credentials given
auth.using.token=Authentication using encrypted token {{token}}, user {{user}}{{flag}}
auth.bad.basic=Basic authorization header invalid
auth.authorized=Authorized as user {{user}}{{flag}}
auth.invalid.expiration.format=Invalid expiration value for user {{user}}, {{error}}

bytecode.disasm=*** Disassembly of {{name}}
bytecode.instruction={{addr|%4d}}: {{depth|pad "| "}}{{op|%-12s}} {{operand}}
bytecode.count=Disassembled {{count}} instructions 


cache.added=>>> Cache {{name}} ({{id}}) added item: {{key}}
cache.created=>>> Cache {{name}} ({{id}}) created
cache.scan.start=>>> Cache {{name}} ({{id}}) starting expiration scan
cache.scan.delete=>>> Cache {{name}} ({{id}}) deleted expired item: {{key}}
cache.scan.delete.count=>>> Cache {{name}} ({{id}}) expired {{count}} items
cache.scan.not.found=>>> Cache {{name}} ({{id}}) not found during expiration scan
cache.purge=>>> Cache {{name}} ({{id}}) purging {{count}} items
cache.delete=>>> Cache {{name}} ({{id}}) deleting item {{key}}
cache.found=>>> Cache {{name}} ({{id}}) located item {{key}}


child.invoke=Service invocation, {{method}} {{endpoint}}
child.json.error=JSON error processing child request, {{error}}
child.file.error=File error processing child service, {{error}}
child.running=Running {{command}}
child.retain.req=Retaining request  file {{path}}
child.retain.resp=Retaining response file {{path}}
child.delete=Deleting request and response files
child.start=Service process {{pid}} started
child.completed=Service process {{pid}} completed in {{duration}}
child.compile.error=Service process {{pid}} compilation error, {{error}}
child.service.error=Service process {{pid}} execution error, {{error}}
child.waiting=Waiting for execution slot ({{count}} currently active)
child.timeout=Timeout waiting for slot


cli.env.resolve=resolving env {{name}} = "{{value}}"
cli.handler=Invoking {{name}} handler for value {{value}}
cli.unexp.parm.parsed=Unexpected parameters already parsed: {{list}}
cli.token=Processing token: {{token}}
cli.parm=Added parameter {{count}}
cli.remaining.parms=All remaining tokens are parameters
cli.set.name=Setting value for option {{name}}
cli.set.value=Option value set to {{value}}
cli.set.default=Registering default verb {{verb}}
cli.parm.expect.min=Expected at least {{min}} parameters, found {{count}}
cli.parm.expect.var=Expected varying parameters, found {{count}}
cli.parm.expect.num=Expected {{want}}, found {{count}}
cli.invoke=Invoking command action
cli.no.action=No command action was ever specfiied during parsing
cli.platform.check=Verifying option supported on platform {{platform}}
cli.platform.unsupported=Option value unuspported on platform {{platform}}
cli.default.verb=Using default verb {{verb}}
cli.unclaimed=Unclaimed token added as parameter {{count}}
cli.platform.subcommand=Verifying platform support for subcommand; not supported on {{platform}}
cli.default.action.args=Passing remaining arguments to default action: {{args}}
cli.saving.action=Saving action routine in subcommand context
cli.subgrammar=Transferring control to subgrammar for {{verb}}
cli.tokens=Remaining tokens: {{tokens}}
cli.parm.count=Initial parameter count is {{count}}
cli.parm.saving=Saving program parameters: {{parms}}
cli.no.source=No source given, reading from console 
cli.not.pipe=Console is not a pipe device
cli.pipe=Console is a pipe device 
cli.source=Source: {{text|lines}}
cli.project=Read project directory at {{path}}
cli.project.file=Reading project file {{path}}
cli.source.file=Reading source file {{path}}


compiler.error={{name}} compilation failed, {{duration}}: {{error}}
compiler.success={{name}} compilation completed, {{duration}}
compiler.usage.error=Usage error for {{name}}, {{error}}
compiler.usage.create=Create variable {{name}} at {{location}}
compiler.usage.write=Write variable {{name}}
compiler.usage.read=Read variable {{name}} at {{location}}
compiler.usage.not.found=Unknown symbol referenced, {{error}}
compiler.errors=Compilation failed with errors, {{error}}
compiler.open=Open  compiler {{id}}
compiler.close=Close compiler {{id}}
compiler.closed=Attempt to close unopened compiler {{id}}

config.active=Make configuration "{{name}}" active
config.base.loaded=Base configuraiton previously loaded from {{path}}
config.is.active=Configuration "{{name}}" now active, with id {{id}}
config.create.dir=Create configuration directory {{path}}
config.read.profile=Reading configuration file "{{path}}"
config.loaded.config=Loaded configuration "{{name}}" with id {{id}}, {{count}} items
config.not.found=No configuraiton named "{{name}}" found, creating
config.using=Using configuration "{{name}}" with id {{id}}
config.salt=Generating profile encryption salt
config.external=Reading external config item "{{name}}" from file {{path}}
config.decrypt.error=Error decrypting external configuration item "{{name}}", {{error}}
config.decrypted=Decrypted external configuration item "{{name}}"
config.legacy.read=Reading legacy configuration file {{path}}
config.legacy.load=Loadded configuratin "{{name}}" with id {{id}}, {{count}} items
config.save.error=Error storing configuration "{{name}}", {{error}}
config.save=Stored configuration "{{name}}" with id {{id}} to {{path}}
config.external.check=Checking externalized item {{name}}
config.external.encrypt.error=Error encrypting external configuration item "{{name}}", {{error}}
config.external.encrypt=Encrpted external configuration item "{{name}}"
config.external.write.error=Error storing external configuration item "{{name}}" to file {{path}}, {{error}}
config.external.write=Stored external configuration item "{{name}}" to file {{path}}
config.external.deleted=Deleted external config file {{path}}
config.external.delete.error=Error deleting external config file {{path}}, {{error}}
config.external.not.found=No external config file {{path}} to remove
config.delete.active=Cannot delete active profile {{name}}
config.delete.error=Error deleting profile file {{path}}, {{error}}
config.deleted=Deleted profile {{name}}, file {{path}}
config.delete.not.found=No such profile "{{name}}" to delete
config.set=Setting profile key "{{name}}" = "{{value}}"
config.set.default=Setting default key "{{name}}" = "{{value}}"
config.deleting=Deleting profile key "{{name}}"

db.connect=Connecting to {{constr}}
db.query.rows=Query rows, sql: {{sql}}
db.tx.query.rows=(TX) Query rows, sql: {{sql}}
db.scan=Scanned {{count}} rows, asStruct={{flag}}
db.exec=Executing, sql: {{sql}}
db.tx.exec=(TX) Executing, sql: {{sql}}
db.rows={{count}} rows affected
db.rows.close=rows.Close() called
db.rows.next=rows.Next() called, more rows={{flag}}
db.dsn=Accessing using DSN {{name}}
db.dsn.error=Error reading dsn {{name}}{{user|label ", user="}}: {{error}}
db.dsn.found=DSN {{name}} found
db.dsn.noauth=User {{user}} not authorized for action {{action}} in dsn {{dsn}}
db.dsn.auth=User {{user}} is authorized for action {{action}} in dsn {{dsn}}
db.error=Database error, {{error}}
db.dsn.constr=Connection string is {{constr}}


go.launch=Launching go routine {{function}} from thread id {{thread}}
go.native=In native Go routine for {{name}}, context thread ID {{thread}}
go.args=Thread {{thread}} argument list: {{args}}
go.exit.error=Go routine invocation of {{name}} (thread {{thread}}) exits with {{error}}
go.exit=Go routine invocation of {{name}} (thread {{thread}}) exits without error

logging.filename=New log file opened: {{name}}
logging.purging=Purging all but {{count}} logs from {{path}}
logging.archiving=Archving all but {{count}} logs from {{path}}
logging.list.error=Error making list of log files: {{error}}
logging.archive.error=Error archiving log file: {{error}}
logging.rollover.scheduled=Log rollover #{{count}} scheduled for {{time}}
logging.rollover.save=ERROR: RollOverLog() unable to roll over log file: {{error}}
logging.rollover.open=ERROR: RollOverLog() unable to open new log file: {{error}}
logging.rollover=Log file being rolled over
logging.archived=Archived {{filename}}
logging.archive.delete.error=Error deleting archived log file, {{error}}
logging.purge.error=Error puring log file, {{error}}
logging.purged=Deleted {{filename}}
logging.write.error=ERROR: unable to write log entry: {{error}}
logging.no.class=ERROR: Invalid class {{class}} in call to {{func}}()
logging.bytecode={{message}}

logon.url=Logon URL is {{url}}
logon.request=REST request:\n{{body}}
logon.post.error=POST {{url}} failed, {{error}}
logon.redirect=Redirecting to {{url}}
logon.post.status=REST POST {{url}}, status {{status}}
logon.payload.error=Bad logon payload, {{error}}
logon.response=REST response:\n{{body}}


optimizer.disabled=Optimizations disabled by configuraiton setting
optimizer.bytecode=@@@ Optimizing bytecode {{name}} @@@
optimizer.found=Optimization found in {{name}}: {{desc}}
optimizer.stats=Found {{count}} optimization(s) for a net change of {{change}} instructions
optimizer.existing.code=Patching, existing code
optimizer.new.code=Patching, new code
optimizer.dest.error=Error parsing destination, {{error}}

pkg.builtins.table=Adding builtin functions to symbol table {{name}}
pkg.builtins.package=Creating new package {{name}}
pkg.builtins.value=Adding value {{name}} to {{package}}
pkg.builtin.builtin=Adding builtin {{name}} to {{package}}
pkg.builtins.package.add=### Adding builting packages to {{name}} package
pkg.builtins.processing=... processing builtin {{name}}
pkg.compiler.packages=Adding compiler packages to symbol table {{name}}({{id}})
pkg.compiler.duplicate=Duplicate package {{name}} already in table
pkg.compiler.autoimport=+++ Starting auto-import, all={{flag}}
pkg.compiler.import=*** Processing import list
pkg.commpiler.remap=*** Remapping Go-style import path "{{gopath}}" to Ego path "{{egopath}}"
pkg.compiler.importing=*** Importing package "{{name}}"
pkg.compiler.builtins.add=+++ Adding builtins for package {{name}}
pkg.compiler.builtins.already=--- Builtins already initialized for package {{name}}
pkg.compiler.builtins.none=+++ No builtins for package {{name}}
pkg.compiler.source=+++ Adding source for package {{name}}
pkg.compiler.import.already=--- Import of package "{{name}}" already done
pkg.compiler.import.update=++ Updating package definition {{name}}
pkg.compiler.import.keys=+++ package keys: {{keys|list}}
pkg.compiler.read.file=+++ Reading package file {{path}}
pkg.compiler.apply.path=+++ Applying path, {{path}}
pkg.compiler.dir.read=+++ Directory read attempt for {{path}}
pkg.compiler.dir.empty=+++ Directory is empty
pkg.merge=... merging key {{key}} from existing package
pkg.runtime.packages=Adding runtime packages to symbol table {{name}}({{id}})
pkg.runtime.package=Adding runtime package {{package}} to symbol table {{name}}({{id}})
pkg.auto.import=While auto-importing packages,
pkg.auto.import.error=  {{name|%-10s}} {{error}}
pkg.compiler.import.found=Package {{name}} already imported, skipping
pkg.runtime.packages.missing=Unable to activate package {{name}} because it has not been imported
pkg.map.function.mismatch=Mismatched function declaration for {{package}}.{{expected}}, declared as {{actual}}
pkg.runtime.unknown=Package {{name}} not yet defined

resource.create=Create using sql: {{sql}}
resource.createif=Create if-not-exists using sql: {{sql}}
resource.delete=Delete using sql: {{sql}}
resource.explode.invalid=Invalid explode on type {{type}}
resource.insert=Insert using sql: {{sql}}
resource.parms=using parameters: {{list|}}
resource.read=Read using sql: {{sql}}
resource.read.rows=Read {{count}} rows
resource.update="Update using sql: {{sql}}

rest.heartbeat=Checking for heartbeat at {{name}}
rest.no.token=Endpoint {{path}} does not require a token
rest.auth.bearer=Authorization set using bearer token: {{token}}
rest.cert.parse.error=Failed to parse certificate for client configuration
rest.cert.read.error=Failed to read server certificate file, {{error}}
rest.tls=Client TLS {{status}}
rest.allow.insecure=Configuration profile allows insecure client
rest.method={{method}} {{endpoint}}
rest.request.payload=Request payload\n{{body}}
rest.response.payload=Response payload\n{{body}}
rest.error=REST failed, {{error}}{{status|label ", status="}}
rest.status=Status: {{status}}
rest.reply.media=Reply media type: {{media}}
rest.header=Server header: {{header}}
rest.apply.media=Adding media type: {{media}}
rest.request.header=Request header: {{name}} {{values|list}}
rest.cookie=Response cookie: {{cookie}}
rest.bad.payload=Bad payload: {{error}}
rest.set.logger={{mode}} {{logger}}({{loggerid}})
rest.auth.refer=*** Referring authorization requst to {{path}}
rest.auth.token=Endpoint {{path}} requires valid token authentication
rest.response.body.text=Response body text: {{body}}
rest.response.body.bytes=Response body bytes: {{body}}
rest.response.header=Response header: {{name}} = {{values|list}}
rest.extracted.response.header=  ResponseWriter header: {{name}} = {{values|list}}
rest.start=*** START NEW REQUEST ***
rest.start.info={{method}} {{path}} from {{host}} ({{size}} bytes of request content)
rest.parameter.values=Parameter {{key}} = {{values|list}}
rest.header.values=Header {{key}} = {{values|list}}
rest.server.log=Server log response payload contains {{lines}} {{type}} records
rest.media.check=Validating request against accepted media types: {{media|list}}
rest.request={{method}} {{endpoint}} from {{host}}
rest.agent=User agent: {{agent}}
rest.parameters=Request parameters: {{params}}
rest.url.parts=URL components for {{path}}: {{urlparts|list}}
rest.sql=SQL statements:\n{{statements|lines}}

route.native.token=Using native handler to generate token for {{name}}
route.native.down=Using native handler for DOWN service
route.native.log=Using native handler for log retrieval service
route.dump.header=Dump of router {{name}}, with {{count}} routes defined
route.dump={{method|%-6s}} {{endpoint|%-50s}} {{file|label "file="}}{{admin|empty|nonempty "admin "}}{{auth|empty|nonempty "auth "}}{{perms|label "perms="}}
route.search=Searching for route for {{method}} {{path}}
route.search.none=No routes matched
route.search.one=Only route that matched was {{endpoint}}
route.search.multiple=There are {{count}} possible candidate routes
route.search.candidate=    route candidate: {{endpoint}}
route.search.match.exact=exact match for {{endpoint}}
route.search.match.novars=matching because no variables in {{endpoint}}
route.search.match.vars=matching because fewest variables in {{endpoint}}, {{min}} vs {{max}}
route.handler.nil=Invalid route (nil handler) selected, {{route}}
route.handler=Route {{endpoint}} selected, handler {{handler}}
route.auth=Required route permission {{perm}} not authorized for user {{user}}
route.cred=Endpoint required authentication credentials not in request
route.admin=Endpoint can only be accessed by admin user 
route.media.error=No acceptable media types found in {{list}}

runtime.lib.path=Runtime library found at {{path}}
runtime.lib.error=Attempt to access library failed, {{error}}
runtime.lib.extract=Extracting runtime library to {{path}}
runtime.lib.extract.item=Extracting {{name}} to {{path}}
runtime.extensions.error=Error retrieving extensions variable {{name}}, {{error}}
runtime.typing.error=Error retrieving type checking variable {{name}}, {{error}}
runtime.autoimport.all=Auto-importing all default runtime packages
runtime.autoimport.min=Auto-importing only minimum required packages
runtime.debug.directive=DEBUG DIRECTIVE
runtime.access.int=Error converting value to int, {{error}}
runtime.access.int32=Error converting value to int32, {{error}}
runtime.access.int64=Error converting value to int64, {{error}}
runtime.access.float64=Error converting value to float64, {{error}}
runtime.access.float32=Error converting value to float32, {{error}}
runtime.access.bool=Error converting value to bool, {{error}}
runtime.chan.not.open=Invalid attempt to use nil channel value
runtime.nil.func=Attempt to register nil function declaration
runtime.nil.func.use=Attempt to use nil function declaration
runtime.nil.type=Attempt to create instance of nil type
runtime.list.nil.set=Attempt to set element in nil list
runtime.list.nil.read=Attempt to read element from nil list
runtime.list.nil.slice=Attempt to create slice from nil list
runtime.list.nil.append=Attempt to append to nil list
runtime.map.nil.read=Attempt to read from nil map
runtime.map.nil.modify=Attempt to modify nil map 
runtime.map.tomap=Attempt to convert unsupported Ego map to native map, with key type {{type}}
runtime.pkg.nil.read=Attempt to read from nil package
runtime.pkg.nil.write=Attempt to modify nil package
runtime.ptr.nil.read=Attempt to dereference nil pointer
runtime.struct.nil.type=Attempt to create structure with nil type
runtime.struct.coerce=Error coercing value for field {{name}}: {{error}}
runtime.struct.nil.read=Attempt to read from nil structure
runtime.struct.nil.write=Attempt to write to nil structure
runtime.struct.dup.field=Duplicate field name {{name}}
runtime.struct.type=Struct bytecode encountered unexpected type value {{value}}
runtime.deepequal.nil=Attempt to perform DeepEqual on nil value
runtime.type.nil.read=Attempt to read nil type definition
runtime.type.nil.write=Attempt to write nil type definition
runtime.type.must.be.struct=Cann perform operation on non-struct type {{type}}
runtime.profile.active=Profiling already active; resetting data collection
runtime.profile.started=Starting profiling 
runtime.profile.inactive=Profiling not active
runtime.profle.stopped=Stopping profiling
runtime.compile.error=Error compiling {{desc}}, {{error}}
runtime.empty.bytecode=No compiled code to run


server.starting=Starting server (Ego {{version}}), instance {{id}}
server.loggers=Active loggers: {{loggers|list}}
server.new.token=New server token generated: {{token}}
server.sandbox=Server file I/O sandbox path: {{path}}
server.init.time=Initialization complete in {{elapsed}}
server.start.insecure=** REST service (insecure) starting on port {{port}}
server.init.service.routes=Enabling Ego service endpoints
server.init.service.routes.error=No ego service endpoints, {{error}}
server.explicit.id=Explicit server ID set to {{id}}
server.redirector=** HTTP/HTTPS redirector started on port {{port}}
server.start.secure=** REST service (secure) started on port {{port}}
server.cert.file=**   cert file: {{path}}
server.key.file=**   key  file: {{path}}
server.no.token=No existing server token found for profile {{profile}}
server.active.config=Active configuration "{{profile}}:
server.config.item={{key}} = "{{value}}"
server.route.not.found=404 {{message}}
server.redirect.disallowed=400 {{method}} {{url}} from {{host}}:{{port}}; HTTPS redirect disallowed
server.redirect=301 {{method}} {{url}} from {{host}}:{{port}}; redirected to {{redirect}}
server.redirect.error=Unable to start HTTP/HTTPS redirector: {{error}}
server.endpoints.admin=Enabling /admin endpoints
server.endpoints.dsn=Enabling /dsn endpoints
server.endpoints.tables=Enabling /tables endpoints
server.db.error=Database error, {{error}}
server.auth.init=Initializing credentials and authorizations
server.service.dir=scanning directory {{path}}
server.service.route=  {{method}} {{path}}{{parms}} {{auth|label "auth="}}
server.shutdown=Server shutdown by admin function
server.request={{status}} {{method}} {{path}} from {{host}}{{user|label "; user "}}; length {{length}}; content {{type}}; elapsed {{elapsed}}
server.memory=Memory: Allocated({{alloc|%8.3f}}) Total({{total|%8.3f}}) System({{system|%8.3f}}) GC({{cycles}})
server.redirected=Redirected incoming request for {{oldpath}} to {{newpath}}
server.endpoints.redirects=Registering static redirect routes
server.endpoint.redirection=  redirect {{method}} {{from}} to {{to}}
server.status=Requests in last {{interval}} seconds: admin({{admin}}) service({{services}})  asset({{assets}}) tables({{tables}}) heartbeat({{heartbeats}})
server.route.error={{status}} {{message}}: {{method}} {{path}} from {{remote}}
server.child.error=Execution error: {{error}}
server.admin.waiting=Waiting for server to stop
server.admin.stopping=Server stopped, {{error}}
server.error=Server error, {{error}}
server.auth.realm=Authentication challenge realm "{{realm}}"
server.write.text=@ {{text}}

services.invalid.ignored=Ignoring invalid value for {{name}}: {{value}}
services.cache.add=Caching compilation unit for {{endpoint}}
services.cache.aged=Endpoint {{endpoint}} aged out of cache
services.cache.use=Using cached service compilation for {{endpoint}}
services.pkg.saved=Cached {{count}} symbol definitions for {{endpoint}}
services.pkg.loaded=Loaded {{count}} symbol definitions from cached symbol table {{name}}
services.debug.enabled=Debug mode enabled for {{endpoint}}
services.load=Service code loaded from {{path}}
services.import.error=Unable to auto-import packages, {{error}}
services.compile.error=Service compilation error, {{error}}
services.debug.start=Debugging started for service {{method}} {{endpoint}}
services.debug.end=Debugging ended for service {{method}} {{endpoint}}
services.run=Invoking service bytecode {{name}}
services.elapsed=Service execution took {{duration}}
services.run.error=Service execution error, {{error}}
services.cache.symbols=Saving service symbol table {{table}} for endpoint {{endpoint}}
services.using.symbols=Using cached symbol table {{table}} for endpoint {{endpoint}}

sql.read.unique=Read unique query: {{sql}}
sql.read.nullabe=Read nullable query: {{sql}}
sql.query=Query: {{sql}}
sql.columns.metadata=Columns metadata query: {{sql}}
sql.query.error=Query error: {{error}}
sql.row.count.query=Row count query: {{sql}}
sql.exec=Execute: {{sql}}
sql.rows={{count}} rows affected
sql.read.rows=Read {{rows}} rows of {{columns}} columns


stats.time=Compile and execution time:  {{duration|%15s}}
stats.time.test=Total test execution duration: {{duration|%11.4fms}}
stats.instructions=Bytecode instructions executed: {{count|%12d}}
stats.max.stack=Max runtime stack size:         {{size|%12d}}
stats.memory.heap=Memory currently on heap        {{size|%12d}}
stats.objects.heap=Objects currently on heap       {{size|%12d}}
stats.total.heap=Total heap memory alloated      {{size|%12d}}
stats.system.heap=Total system memory allocated:  {{size|%12d}}
stats.gc.count=Garbage collection cycles:      {{count|%12d}}
stats.gc.cpu=Garbage collection pct of cpu:     {{cpu|%8.7f}}


symbols.push.table=({{thread}}) push symbol table; "{{name}}" <= "{{parent}}"
symbols.push.table.boundary=({{thread}}) push symbol table; "{{name}}" <= "{{parent}}" (boundary={{flag}})
symbols.pop.table=({{thread}}) pop symbol table; "{{name}}" => "{{child}}"
symbols.rewrite.pkg=Rewrite exported values for package {{package}} from table {{table}}
symbols.breakreturn=({{thread}}) setting break-on-return
symbols.breakreturn.error=({{thread}}) failed setting break-on-return; call frame invalid
symbols.nil.parent=({{thread}}) nil symbol table parent of {{table}}
symbols.defer.task=Defer task runs using symbol table "{{name}}" ({{id}})
symbols.pkg.set=for package {{package}}, {{action}} {{key}} to {{value|%v|size 80}}
symbols.get.addr={{table}}({{id}}), get(&{{name}})
symbols.set.readonly=Marking {{name}} in table {{table}}. readonly={{flag}}
symbols.boundary.skip=Symbol scope traversed boundary at {{table}}({{depth}}), skip to {{next}}({{nextdepth}})
symbols.set.parent=Setting parent of table {{name}} to {{parent}}
symbols.root=+++ Root of {{name}}({{id}}): {{parent}}({{parentid}})
symbols.new.bin={{name}}, create new value bin
symbols.create={{table}}({{id}}), create({{name}}) = nil[{{slot}}]
symbols.delete={{table}}({{id}}), delete({{name}})
symbols.get.any={{table|%-20s}}({{id}}), getany      {{name|%-10s}}, slot {{slot|%2d}} = {{value|size 60}}
symbols.get={{table|%-20s}}({{id}}), get         {{name|%-10s}}, slot {{slot|%2d}} = {{value|size 60}}
symbols.set.constant={{table|%-20s}}({{id}}), constant {{name}} = {{value|size 60}}
symbols.set.always={{table|%-20s}}({{id}}), setalways   {{name|%-10s}}, slot {{slot|%2d}} = {{value|size 60}}
symbols.set.attr={{table|%-20s}}({{id}}), setWithAttr {{name|%-10s}}, slot {{slot|%2d}} = {{value|size 60}}, readonly={{readonly}}
symbols.set={{table|%-20s}}({{id}}), set         {{name|%-10s}}, slot {{slot|%2d}} = {{value|size 60}}
symbols.log.header=Symbol table {{name}}, id {{id}}
symbols.log.attrs=Symbol table count={{count}} segments={{segments}}{{includingPackages|empty ""|nonempty ", including packages"}}
symbols.log.symbol={{name|%-16s}} {{type}} = {{value}}


table.unique.columns=Unique columns: {{list}}
table.nullable.columns=Nullable columns: {{list}}
table.schema.tables=Attempting to read tables from schema {{schema}}
table.schema.count=Read {{count}} table names
table.deleted.rows=Deleted {{count}} rows; {{status}}
table.inserted.rows=Inserted {{count}}; {{status}}
table.update.column=Updated column {{name}} value from {{from}} to {{to}}
table.read.error=read error, {{error}}
table.read=Read {{rows}} rows of {{columns}} columns; {{status}}
table.update.table=Request to update rows in table {{name}}
table.parms=Request parameteres: {{parms}}
table.updated.rows=Updated {{count}} rows; {{status}}
table.values=values list = {{data|list}}
table.query.error=failed query: {{sql}}, {{error}}
table.exclude=Exclude list = {{data||list}}
table.permissions=Permissions list for user {{name}}, table {{table}}: {{perms}}
table.perms.deleted={{count}} permissions for {{table}} deleted
table.write.error=Error writing/updating: {{error}}
table.tx=Exxecuting SQL statements in a transaction
table.tx.count=Transaction request has {{count}} operations
table.tx.rollback=Transaction rolled back at task {{count}}
table.tx.done=Completed {{operations}} in transaction, modified and/or read {{afffected}} rows, returning {{rows}} rows
table.tx.affected=Completed {{operations}} in tractions, uupdated {{affected}} rows
table.tx.payload=Transaction task {{id}} payload:\n{{body}}
table.created=Table created
table.affected=Affected {{count}} rows
table.symbol=Apply {{label}} value {{value}} to {{name}}
table.no.auth=User {{user}} does not have {{perm|list}} permission for table {{table}}
table.auth=User {{user}} has {{perm|list}} permission for table {{table}}
table.op=Operation {{operation}}
table.op.table=Operation {{operation}} on table {{table}}
table.abstract=Abstract flag={{flag}}
table.deleted=Table {{name}} deleted

tokens.lexer=Lexer error {{error}}
tokens.complete=### Tokenization complete, {{count}} tokens, {{duration}}
tokens.dump=Tokenizer contents:
tokens.token=  [{{line|%3d}}:{{pos|%3d}}] {{token}}


trace.branch.catch=({{thread|%3d}}) branch to catch block at {{addr}} on error: {{error}}
trace.struct.init=struct init failed to convert field "{{name}}' ({{oldtype}}) to {{newtype}}
trace.line=({{thread|%3d}}) >>> {{location|%-20s}}{{text}}
trace.package.symbols=({{thread|%3d}}) Using symbol table from package {{package}}
trace.package.update=({{thread|%3d}}) Updating package {{package}}
trace.symbol.readonly={{thread|%3d}} symbol {{name}} (readonly {{flag}})
trace.tracing=*** Tracing {{name}} ({{thread}})
trace.return=({{thread|%3d}}) *** Return status: {{error}}
trace.end=*** End tracing {{name}} ({{thread}})
trace.unexp.callframe=>>> Unexpected call frame found: {{module}}:{{line}}
trace.instruction=({{thread|%3d}}) {{addr|%3d}} : {{module|%20s}} {{line|%3d}} {{opcode|%-15s}} {{operand|%-30s}} [{{stackpointer|%2d}}]: {{stack|list}}
trace.test.file=+++ Reading test file {{path}}
trace.loop.empty==== loop stack empty
trace.chan.create=--> Created channel {{name}}
trace.chan.send=--> Sending on channel {{name}}
trace.chan.receive=--> Receiving on channel {{name}}
trace.chan.close=--> Closing channel {{name}}
trace.unwind=[{{thread|%3d}}] >>> Unwinding frame {{frame}} at {{module}}:{{line}}
trace.getthis=---> GetThis {{name}} = {{value}}

