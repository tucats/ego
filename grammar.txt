// Representation of the CLI grammar. This is used for diagnostic
// purposes only, and is not compiled into the program.

var context = &Context   {
    AppName:                "ego",
    Description:            "execute code in the Ego language",
    Copyright:              "(C) Copyright Tom Cole 2020, 2021, 2022",
    Version:                "1.2-521",
    Grammar:                []Option{
      {
        LongName:               "insecure",
        ShortName:              "k",
        Description:            "Do not require X509 server certificate verification",
        OptionType:             BooleanType,
        Action:                 app-cli/app.InsecureAction(),
      },
      {
        LongName:               "config",
        Aliases:                []string{ "configuration", "profile", "prof" },
        Description:            "Manage the default configuration",
        OptionType:             SubCommand,
        Value:                  []Option{
          {
            LongName:               "list",
            Description:            "List all configurations",
            OptionType:             SubCommand,
            Action:                 app-cli/config.ListAction(),
          },
          {
            LongName:               "show",
            Description:            "Show the current configuration",
            ParameterDescription:   "key",
            ParametersExpected:     -1,
            OptionType:             SubCommand,
            Action:                 app-cli/config.ShowAction(),
          },
          {
            LongName:               "set-output",
            Description:            "Set the default output type (text or json)",
            ParameterDescription:   "type",
            ParametersExpected:     1,
            OptionType:             SubCommand,
            Action:                 app-cli/config.SetOutputAction(),
          },
          {
            LongName:               "set-description",
            Description:            "Set the configuration description",
            ParameterDescription:   "text",
            ParametersExpected:     1,
            OptionType:             SubCommand,
            Action:                 app-cli/config.SetDescriptionAction(),
          },
          {
            LongName:               "delete",
            Aliases:                []string{ "unset" },
            Description:            "Delete a key from the configuration",
            ParameterDescription:   "key",
            ParametersExpected:     1,
            OptionType:             SubCommand,
            Action:                 app-cli/config.DeleteAction(),
            Value:                  []Option{
              {
                LongName:               "force",
                ShortName:              "f",
                Description:            "Do not signal error if option not found",
                OptionType:             BooleanType,
              },
            },
          },
          {
            LongName:               "remove",
            Description:            "Delete an entire configuration",
            ParameterDescription:   "name",
            ParametersExpected:     1,
            OptionType:             SubCommand,
            Action:                 app-cli/config.DeleteProfileAction(),
          },
          {
            LongName:               "set",
            Description:            "Set a configuration value",
            ParameterDescription:   "key=value",
            ParametersExpected:     1,
            OptionType:             SubCommand,
            Action:                 app-cli/config.SetAction(),
          },
        },
      },
      {
        LongName:               "logon",
        Aliases:                []string{ "login" },
        Description:            "Log on to a remote server",
        OptionType:             SubCommand,
        Action:                 app-cli/app.Logon(),
        Value:                  []Option{
          {
            LongName:               "username",
            ShortName:              "u",
            Description:            "Username for login",
            OptionType:             StringType,
          },
          {
            LongName:               "password",
            ShortName:              "p",
            Description:            "Password for login",
            OptionType:             StringType,
          },
          {
            LongName:               "logon-server",
            ShortName:              "l",
            Aliases:                []string{ "server" },
            Description:            "URL of logon server",
            OptionType:             StringType,
          },
        },
      },
      {
        LongName:               "profile",
        ShortName:              "p",
        Description:            "Name of profile to use",
        OptionType:             StringType,
        Action:                 app-cli/app.UseProfileAction(),
      },
      {
        LongName:               "debug",
        ShortName:              "d",
        Description:            "Debug loggers to enable",
        OptionType:             StringListType,
        Action:                 app-cli/app.DebugAction(),
      },
      {
        LongName:               "format",
        ShortName:              "f",
        Description:            "Specify text, json or indented output format",
        OptionType:             KeywordType,
        Keywords:               []string{ "json", "indented", "text" },
        Action:                 app-cli/app.OutputFormatAction(),
      },
      {
        LongName:               "version",
        ShortName:              "v",
        Description:            "Show version number of command line tool",
        OptionType:             BooleanType,
        Action:                 app-cli/app.ShowVersionAction(),
      },
      {
        LongName:               "quiet",
        ShortName:              "q",
        Description:            "If specified, suppress extra messaging",
        OptionType:             BooleanType,
        Action:                 app-cli/app.QuietAction(),
      },
      {
        LongName:               "version",
        Description:            "Display the version number",
        OptionType:             SubCommand,
        Action:                 app-cli/app.VersionAction(),
      },
      {
        LongName:               "sql",
        Description:            "Execute SQL in the database server",
        ParameterDescription:   "sql-text",
        ParametersExpected:     -99,
        OptionType:             SubCommand,
        Action:                 commands.TableSQL(),
        Value:                  []Option{
          {
            LongName:               "sql-file",
            ShortName:              "f",
            Aliases:                []string{ "file" },
            Description:            "Filename of SQL command text",
            OptionType:             StringType,
          },
          {
            LongName:               "row-ids",
            ShortName:              "i",
            Aliases:                []string{ "ids" },
            Description:            "Include the row UUID in any output",
            OptionType:             BooleanType,
          },
          {
            LongName:               "row-numbers",
            ShortName:              "n",
            Aliases:                []string{ "row-number", "row" },
            Description:            "Include the row number in any output",
            OptionType:             BooleanType,
          },
        },
      },
      {
        LongName:               "table",
        Aliases:                []string{ "tables", "db", "database" },
        Description:            "Operate on database tables",
        OptionType:             SubCommand,
        Value:                  []Option{
          {
            LongName:               "sql",
            Description:            "Directly execute a SQL command",
            ParameterDescription:   "sql-text",
            ParametersExpected:     -99,
            OptionType:             SubCommand,
            Action:                 commands.TableSQL(),
            Value:                  []Option{
              {
                LongName:               "sql-file",
                ShortName:              "f",
                Aliases:                []string{ "file" },
                Description:            "Filename of SQL command text",
                OptionType:             StringType,
              },
              {
                LongName:               "row-ids",
                ShortName:              "i",
                Aliases:                []string{ "ids" },
                Description:            "Include the row UUID in the output",
                OptionType:             BooleanType,
              },
              {
                LongName:               "row-numbers",
                ShortName:              "n",
                Aliases:                []string{ "row-number", "row" },
                Description:            "Include the row number in the output",
                OptionType:             BooleanType,
              },
            },
          },
          {
            LongName:               "permissions",
            Aliases:                []string{ "perms" },
            Description:            "List all table permissions (requires admin privileges)",
            OptionType:             SubCommand,
            Action:                 commands.TablePermissions(),
            Value:                  []Option{
              {
                LongName:               "user",
                ShortName:              "u",
                Description:            "If specified, list only this user",
                OptionType:             StringType,
              },
            },
          },
          {
            LongName:               "show-permission",
            Aliases:                []string{ "permission", "perm" },
            Description:            "List table permissions",
            ParameterDescription:   "table-name",
            ParametersExpected:     1,
            OptionType:             SubCommand,
            Action:                 commands.TableShowPermission(),
            Value:                  []Option{
              {
                LongName:               "user",
                ShortName:              "u",
                Description:            "User (if other than current user) to list)",
                OptionType:             StringType,
              },
            },
          },
          {
            LongName:               "grant",
            Aliases:                []string{ "permission" },
            Description:            "Set permissions for a given user and table",
            ParameterDescription:   "table-name",
            ParametersExpected:     1,
            OptionType:             SubCommand,
            Action:                 commands.TableGrant(),
            Value:                  []Option{
              {
                LongName:               "permission",
                ShortName:              "p",
                Aliases:                []string{ "permission", "permissions", "perms", "perm" },
                Description:            "Permissions to set for this table updated",
                OptionType:             StringListType,
                Required:               true,
              },
              {
                LongName:               "user",
                ShortName:              "u",
                Description:            "User (if other than current user) to update",
                OptionType:             StringType,
              },
            },
          },
          {
            LongName:               "list",
            Description:            "List tables",
            OptionType:             SubCommand,
            Action:                 commands.TableList(),
            Value:                  []Option{
              {
                LongName:               "limit",
                Aliases:                []string{ "count" },
                Description:            "If specified, limit the result set to this many rows",
                OptionType:             IntType,
              },
              {
                LongName:               "start",
                Aliases:                []string{ "offset" },
                Description:            "If specified, start result set at this row",
                OptionType:             IntType,
              },
              {
                LongName:               "no-row-counts",
                Description:            "If specified, listing does not include row counts",
                OptionType:             BooleanType,
              },
            },
          },
          {
            LongName:               "show-table",
            Aliases:                []string{ "show", "metadata", "columns" },
            Description:            "Show table metadata",
            ParametersExpected:     1,
            OptionType:             SubCommand,
            Action:                 commands.TableShow(),
          },
          {
            LongName:               "drop",
            Description:            "Delete one or more tables",
            ParameterDescription:   "table-name [table-name...]",
            ParametersExpected:     -99,
            OptionType:             SubCommand,
            Action:                 commands.TableDrop(),
          },
          {
            LongName:               "read",
            Aliases:                []string{ "select", "print", "get", "show-contents", "contents" },
            Description:            "Read contents of a table",
            ParametersExpected:     1,
            OptionType:             SubCommand,
            Action:                 commands.TableContents(),
            Value:                  []Option{
              {
                LongName:               "row-ids",
                ShortName:              "i",
                Aliases:                []string{ "ids" },
                Description:            "Include the row UUID column in the output",
                OptionType:             BooleanType,
              },
              {
                LongName:               "row-numbers",
                ShortName:              "n",
                Aliases:                []string{ "row-number", "row" },
                Description:            "Include the row number in the output",
                OptionType:             BooleanType,
              },
              {
                LongName:               "columns",
                ShortName:              "c",
                Aliases:                []string{ "column" },
                Description:            "List of optional column names to display. If not specified, all columns are returned.",
                OptionType:             StringListType,
              },
              {
                LongName:               "order-by",
                ShortName:              "o",
                Aliases:                []string{ "sort", "order" },
                Description:            "List of optional columns use to sort output",
                OptionType:             StringListType,
              },
              {
                LongName:               "filter",
                ShortName:              "f",
                Aliases:                []string{ "where" },
                Description:            "List of optional filter clauses",
                OptionType:             StringListType,
              },
              {
                LongName:               "limit",
                Aliases:                []string{ "count" },
                Description:            "If specified, limit the result set to this many rows",
                OptionType:             IntType,
              },
              {
                LongName:               "start",
                Aliases:                []string{ "offset" },
                Description:            "If specified, start result set at this row",
                OptionType:             IntType,
              },
            },
          },
          {
            LongName:               "delete",
            Description:            "Delete rows from a table",
            ParametersExpected:     1,
            OptionType:             SubCommand,
            Action:                 commands.TableDelete(),
            Value:                  []Option{
              {
                LongName:               "filter",
                ShortName:              "f",
                Aliases:                []string{ "where" },
                Description:            "Filter for rows to delete. If not specified, all rows are deleted",
                OptionType:             StringListType,
              },
            },
          },
          {
            LongName:               "insert",
            Aliases:                []string{ "write", "append" },
            Description:            "Insert a row to a table",
            ParameterDescription:   "table-name [column=value...]",
            ParametersExpected:     -99,
            OptionType:             SubCommand,
            Action:                 commands.TableInsert(),
            Value:                  []Option{
              {
                LongName:               "file",
                ShortName:              "f",
                Aliases:                []string{ "json-file", "json" },
                Description:            "File name containing JSON row info",
                OptionType:             StringListType,
              },
            },
          },
          {
            LongName:               "update",
            Description:            "Update rows to a table",
            ParameterDescription:   "table-name column=value [column=value...]",
            ParametersExpected:     -99,
            OptionType:             SubCommand,
            Action:                 commands.TableUpdate(),
            Value:                  []Option{
              {
                LongName:               "filter",
                ShortName:              "f",
                Aliases:                []string{ "where" },
                Description:            "Filter for rows to update. If not specified, all rows are updated",
                OptionType:             StringListType,
              },
            },
          },
          {
            LongName:               "create",
            Description:            "Create a new table",
            ParameterDescription:   "table-name column:type [column:type...]",
            ParametersExpected:     -999,
            OptionType:             SubCommand,
            Action:                 commands.TableCreate(),
            Value:                  []Option{
              {
                LongName:               "file",
                ShortName:              "f",
                Aliases:                []string{ "json-file", "json" },
                Description:            "File name containing JSON column info",
                OptionType:             StringListType,
              },
            },
          },
        },
      },
      {
        LongName:               "path",
        Description:            "Print the default ego path",
        OptionType:             SubCommand,
        Action:                 commands.PathAction(),
      },
      {
        LongName:               "run",
        Description:            "Run an existing program",
        ParameterDescription:   "file-name",
        ParametersExpected:     -99,
        OptionType:             SubCommand,
        Action:                 commands.RunAction(),
        Value:                  []Option{
          {
            LongName:               "disassemble",
            Aliases:                []string{ "disasm" },
            Description:            "Display a disassembly of the bytecode before execution",
            OptionType:             BooleanType,
          },
          {
            LongName:               "log",
            Description:            "Direct log output to this file instead of stdout",
            OptionType:             StringType,
          },
          {
            LongName:               "trace",
            ShortName:              "t",
            Description:            "Display trace of bytecode execution",
            OptionType:             BooleanType,
          },
          {
            LongName:               "static-types",
            Description:            "Enforce static typing on program execution",
            OptionType:             BooleanType,
          },
          {
            LongName:               "debug",
            ShortName:              "d",
            Description:            "Run with interactive debugger",
            OptionType:             BooleanType,
          },
          {
            LongName:               "full-symbol-scope",
            Description:            "Blocks can access any symbol in call stack",
            OptionType:             BooleanType,
          },
          {
            LongName:               "symbols",
            ShortName:              "s",
            Description:            "Display symbol table",
            OptionType:             BooleanType,
            Private:                true,
          },
          {
            LongName:               "symbol-allocation",
            Description:            "Allocation size (in symbols) when expanding storage for a symbol table",
            OptionType:             IntType,
          },
          {
            LongName:               "auto-import",
            Description:            "Override auto-import configuration setting",
            OptionType:             BooleanValueType,
          },
          {
            LongName:               "entry-point",
            ShortName:              "e",
            Description:            "Name of entrypoint function (defaults to main)",
            OptionType:             StringType,
          },
        },
      },
      {
        LongName:               "server",
        Description:            "Start to accept REST calls",
        OptionType:             SubCommand,
        Value:                  []Option{
          {
            LongName:               "logging",
            Aliases:                []string{ "logger", "log", "logs" },
            Description:            "Display or configure server logging",
            ParameterDescription:   "address:port",
            ParametersExpected:     -1,
            OptionType:             SubCommand,
            Action:                 commands.Logging(),
            Value:                  []Option{
              {
                LongName:               "enable",
                Aliases:                []string{ "set" },
                Description:            "List of loggers to enable",
                OptionType:             StringListType,
              },
              {
                LongName:               "disable",
                Aliases:                []string{ "clear" },
                Description:            "List of loggers to disable",
                OptionType:             StringListType,
              },
              {
                LongName:               "file",
                ShortName:              "f",
                Description:            "Show only the active log file name",
                OptionType:             BooleanType,
              },
              {
                LongName:               "status",
                ShortName:              "s",
                Description:            "Display the state of each logger",
                OptionType:             BooleanType,
              },
              {
                LongName:               "limit",
                ShortName:              "l",
                Description:            "Limit display to this many lines of text",
                OptionType:             IntType,
              },
              {
                LongName:               "session",
                Description:            "Limit display to log entries for this session number",
                OptionType:             IntType,
              },
              {
                LongName:               "keep",
                Description:            "Specify how many log files to keep",
                OptionType:             IntType,
              },
              {
                LongName:               "port",
                ShortName:              "p",
                Description:            "Specify port number of server",
                OptionType:             IntType,
              },
            },
          },
          {
            LongName:               "logon",
            Aliases:                []string{ "login" },
            Description:            "Log on to a remote server",
            OptionType:             SubCommand,
            Action:                 app-cli/app.Logon(),
            Value:                  []Option{
              {
                LongName:               "username",
                ShortName:              "u",
                Description:            "Username for login",
                OptionType:             StringType,
              },
              {
                LongName:               "password",
                ShortName:              "p",
                Description:            "Password for login",
                OptionType:             StringType,
              },
              {
                LongName:               "logon-server",
                ShortName:              "l",
                Aliases:                []string{ "server" },
                Description:            "URL of logon server",
                OptionType:             StringType,
              },
            },
          },
          {
            LongName:               "users",
            Aliases:                []string{ "user" },
            Description:            "Manage server user database",
            OptionType:             SubCommand,
            Value:                  []Option{
              {
                LongName:               "set",
                Description:            "Create or update user information",
                OptionType:             SubCommand,
                Action:                 commands.AddUser(),
                Value:                  []Option{
                  {
                    LongName:               "username",
                    ShortName:              "u",
                    Description:            "Username to create or update",
                    OptionType:             StringType,
                  },
                  {
                    LongName:               "password",
                    ShortName:              "p",
                    Description:            "Password to assign to user",
                    OptionType:             StringType,
                  },
                  {
                    LongName:               "permissions",
                    Description:            "Permissions to grant to user",
                    OptionType:             StringListType,
                  },
                },
              },
              {
                LongName:               "delete",
                Description:            "Delete a user from the server's user database",
                OptionType:             SubCommand,
                Action:                 commands.DeleteUser(),
                Value:                  []Option{
                  {
                    LongName:               "username",
                    ShortName:              "u",
                    Description:            "Username to delete",
                    OptionType:             StringType,
                  },
                },
              },
              {
                LongName:               "list",
                Description:            "List users in the server's user database",
                OptionType:             SubCommand,
                Action:                 commands.ListUsers(),
              },
            },
          },
          {
            LongName:               "caches",
            Aliases:                []string{ "cache" },
            Description:            "Manage server caches",
            OptionType:             SubCommand,
            Value:                  []Option{
              {
                LongName:               "flush",
                Description:            "Flush service caches",
                OptionType:             SubCommand,
                Action:                 commands.FlushServerCaches(),
                Value:                  []Option{
                  {
                    LongName:               "port",
                    ShortName:              "p",
                    Description:            "Specify port number of server",
                    OptionType:             IntType,
                  },
                },
              },
              {
                LongName:               "list",
                Aliases:                []string{ "show" },
                Description:            "List service caches",
                OptionType:             SubCommand,
                Action:                 commands.ListServerCaches(),
                Value:                  []Option{
                  {
                    LongName:               "port",
                    ShortName:              "p",
                    Description:            "Specify port number of server",
                    OptionType:             IntType,
                  },
                },
              },
              {
                LongName:               "set-size",
                Description:            "Set the server cache size",
                ParameterDescription:   "limit",
                ParametersExpected:     1,
                OptionType:             SubCommand,
                Action:                 commands.SetCacheSize(),
                Value:                  []Option{
                  {
                    LongName:               "port",
                    ShortName:              "p",
                    Description:            "Specify port number of server",
                    OptionType:             IntType,
                  },
                },
              },
            },
          },
          {
            LongName:               "run",
            Description:            "Run the rest server",
            OptionType:             SubCommand,
            Action:                 commands.RunServer(),
            Value:                  []Option{
              {
                LongName:               "port",
                ShortName:              "p",
                Description:            "Specify port number to listen on",
                OptionType:             IntType,
              },
              {
                LongName:               "not-secure",
                ShortName:              "k",
                Description:            "If set, use HTTP instead of HTTPS",
                OptionType:             BooleanType,
              },
              {
                LongName:               "is-detached",
                Description:            "If set, server assumes it is already detached",
                OptionType:             BooleanType,
                Private:                true,
              },
              {
                LongName:               "force",
                ShortName:              "f",
                Description:            "If set, override existing PID file",
                OptionType:             BooleanType,
                Private:                true,
              },
              {
                LongName:               "log",
                Description:            "File path of server log",
                OptionType:             StringType,
              },
              {
                LongName:               "keep-logs",
                Description:            "The number of log files to keep",
                OptionType:             IntType,
              },
              {
                LongName:               "sandbox-path",
                Description:            "File path of sandboxed area for file I/O",
                OptionType:             StringType,
              },
              {
                LongName:               "no-log",
                Description:            "Suppress server log",
                OptionType:             BooleanType,
              },
              {
                LongName:               "trace",
                ShortName:              "t",
                Description:            "Display trace of bytecode execution",
                OptionType:             BooleanType,
              },
              {
                LongName:               "full-symbol-scope",
                Description:            "Blocks can access any symbol in call stack",
                OptionType:             BooleanType,
              },
              {
                LongName:               "symbol-allocation",
                Description:            "Allocation size (in symbols) when expanding storage for a symbol table ",
                OptionType:             IntType,
              },
              {
                LongName:               "static-types",
                Description:            "Enforce static typing on program execution",
                OptionType:             BooleanType,
              },
              {
                LongName:               "realm",
                ShortName:              "r",
                Description:            "Name of authentication realm",
                OptionType:             StringType,
              },
              {
                LongName:               "cache-size",
                Description:            "Number of service programs to cache in memory",
                OptionType:             IntType,
              },
              {
                LongName:               "users",
                ShortName:              "u",
                Aliases:                []string{ "user-database" },
                Description:            "File with authentication JSON data",
                OptionType:             StringType,
              },
              {
                LongName:               "superuser",
                Description:            "Designate this user as a super-user with ROOT privileges",
                OptionType:             StringType,
              },
              {
                LongName:               "code",
                ShortName:              "c",
                Description:            "Enable /code endpoint",
                OptionType:             BooleanType,
              },
              {
                LongName:               "session-uuid",
                Description:            "Sets the optional session UUID value",
                OptionType:             UUIDType,
              },
              {
                LongName:               "debug-endpoint",
                ShortName:              "d",
                Description:            "Service endpoint to debug",
                OptionType:             StringType,
              },
            },
          },
          {
            LongName:               "restart",
            Description:            "Restart an existing server",
            OptionType:             SubCommand,
            Action:                 commands.Restart(),
            Value:                  []Option{
              {
                LongName:               "port",
                ShortName:              "p",
                Description:            "Specify port number of server",
                OptionType:             IntType,
              },
            },
          },
          {
            LongName:               "status",
            Description:            "Display server status",
            ParameterDescription:   "address[:port]",
            ParametersExpected:     -1,
            OptionType:             SubCommand,
            Action:                 commands.Status(),
            Value:                  []Option{
              {
                LongName:               "port",
                ShortName:              "p",
                Description:            "Specify port number of server",
                OptionType:             IntType,
              },
            },
          },
          {
            LongName:               "start",
            Description:            "Start the rest server as a detached process",
            OptionType:             SubCommand,
            Action:                 commands.Start(),
            Value:                  []Option{
              {
                LongName:               "port",
                ShortName:              "p",
                Description:            "Specify port number to listen on",
                OptionType:             IntType,
              },
              {
                LongName:               "not-secure",
                ShortName:              "k",
                Description:            "If set, use HTTP instead of HTTPS",
                OptionType:             BooleanType,
              },
              {
                LongName:               "is-detached",
                Description:            "If set, server assumes it is already detached",
                OptionType:             BooleanType,
                Private:                true,
              },
              {
                LongName:               "force",
                ShortName:              "f",
                Description:            "If set, override existing PID file",
                OptionType:             BooleanType,
                Private:                true,
              },
              {
                LongName:               "log",
                Description:            "File path of server log",
                OptionType:             StringType,
              },
              {
                LongName:               "keep-logs",
                Description:            "The number of log files to keep",
                OptionType:             IntType,
              },
              {
                LongName:               "sandbox-path",
                Description:            "File path of sandboxed area for file I/O",
                OptionType:             StringType,
              },
              {
                LongName:               "no-log",
                Description:            "Suppress server log",
                OptionType:             BooleanType,
              },
              {
                LongName:               "trace",
                ShortName:              "t",
                Description:            "Display trace of bytecode execution",
                OptionType:             BooleanType,
              },
              {
                LongName:               "full-symbol-scope",
                Description:            "Blocks can access any symbol in call stack",
                OptionType:             BooleanType,
              },
              {
                LongName:               "symbol-allocation",
                Description:            "Allocation size (in symbols) when expanding storage for a symbol table ",
                OptionType:             IntType,
              },
              {
                LongName:               "static-types",
                Description:            "Enforce static typing on program execution",
                OptionType:             BooleanType,
              },
              {
                LongName:               "realm",
                ShortName:              "r",
                Description:            "Name of authentication realm",
                OptionType:             StringType,
              },
              {
                LongName:               "cache-size",
                Description:            "Number of service programs to cache in memory",
                OptionType:             IntType,
              },
              {
                LongName:               "users",
                ShortName:              "u",
                Aliases:                []string{ "user-database" },
                Description:            "File with authentication JSON data",
                OptionType:             StringType,
              },
              {
                LongName:               "superuser",
                Description:            "Designate this user as a super-user with ROOT privileges",
                OptionType:             StringType,
              },
              {
                LongName:               "code",
                ShortName:              "c",
                Description:            "Enable /code endpoint",
                OptionType:             BooleanType,
              },
              {
                LongName:               "session-uuid",
                Description:            "Sets the optional session UUID value",
                OptionType:             UUIDType,
              },
            },
          },
          {
            LongName:               "stop",
            Description:            "Stop the detached rest server",
            OptionType:             SubCommand,
            Action:                 commands.Stop(),
            Value:                  []Option{
              {
                LongName:               "port",
                ShortName:              "p",
                Description:            "Specify port number of server to stop",
                OptionType:             IntType,
              },
            },
          },
        },
      },
      {
        LongName:               "test",
        Description:            "Run a test suite",
        ParameterDescription:   "file or path",
        ParametersExpected:     -99,
        OptionType:             SubCommand,
        Action:                 commands.TestAction(),
      },
    },
  }
