// Debugger is a package that contains the interactive runtime debugger
// for executing compiled Ego programs.
//
// When a bytecode stream is to be run, a Context is created. This context
// can be run directly using it's own Run() method, or the context can be
// passed to the debugger's Run() method if it is to be run under control of
// the debugger. The debugger's run method is different than the standard one
// in that it detects errors.Debugger signals from the running code, and passes
// control to the debugger each time the signal is returned. This signal is
// generated by the AtLine opcode when running in debug mode. This means that
// at the start of each line of source, the debugger is given control to
// determine what, if anything should be done before resuming exectution of
// the bytecode.
//
// When given control, the debugger evaluates what if any action is needed.
//
//   - If the code has no breakpoints active and is not in single-step mode,
//     then the debugger takes no action and the next line of code is executed.
//
//   - The debugger evaluates if any of the breakpoints should be triggered. A
//     breakpoint occurs when either a condition (such as a symbol value being
//     set to a given value) or a specific line of code (identified by module
//     and line number) is to be executed. In those cases, the debugger drops
//     into "interactive" mode, where the user can use the console to examine
//     or modify the execution state of the program, resume execution, or
//     put the program into "single step" mode so control returns again after
//     each statement.
//
// When in interactive mode, the Debugger has access to the full symbol table
// hierachy of the current program. This means you can use "print" commands to
// examine variables, and the "set" command to change them anywhere in the
// symbol scope tree. You can also examine the call tree of the Ego code, to
// see where the current line of code is executing, and who called the function
// that contains it, and who called that function, etc. up to the top of the
// call tree, which is the "main" function for running code and the REST
// handler for REST server code.
//
// In interactive mode, you can request that the code execute a single line of
// code (single step). By default, this will skip over any calls into another
// function, and just advance to the next line of code in the current module.
// You can also "step into" which indicates that if the next line of code calls
// a function, the step operation should be enabled within that function as
// well so it can be stepped through a line at a time.
package debugger
