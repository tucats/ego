/*
 * Log on to the server. Requires username and password via the authentication
 * headers, and returns an encrypted token that can be used for subsequent
 * authorization operations.  If this service is moved to the lib/services/admin
 * tree, it will be called to process the given endpoint. If it is not present
 * (the default) then a native handler in the server is used for this endpoint.
 * This allows for customization of the behavior of this service.
 */
@endpoint "GET /services/admin/flogon"

import "http"

func handler(req http.Request, resp http.ResponseWriter ) {

// Generate a token and return it as text to the caller
    token := cipher.New(req.Username, "")
    duration, e = time.ParseDuration(profile.Get("ego.server.token.expiration"))
    if e != nil {
        duration, _ = time.ParseDuration("24h")
    }
    
    host, _ := os.Hostname()
    payload := {
        "server": {
            "name": host,
            "id": _instance,
            "api": 1,
            "session": _session,
        },
        "token":token, 
        "expires": time.Now().Add(duration).String(),
        "identity": req.Username,
        }

    @json {
        resp.Write(payload)
    }

    @text {
        resp.Write(token)
    }
    
    resp.WriteHeader(http.StatusOK)

    return
}
