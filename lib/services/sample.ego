// Sample service. This illustrates using a collection-style URI
// path, of the form:
//
//    users/{{name}}/{{field}}
//
//  If name and field are omitted, it lists the possible users.
//  If field is omitted, it lists all info about a specific user.
//  If field is given, it lists the specific field for the specific user.

func handler( req Request, resp Response) {

    // Define the required URI syntax. This ends the request in an error
    // if the syntax is not valid in the URL we received.
    @url "/users/{{name}}/{{item}}"

    // Construct some sample data.
    type person struct {
        age    int 
        gender string 

    }
    names := map[string]person{
            "tom": {age: 51, gender:"M"},
            "mary": {age:47, gender:"F"},
    }

    // If the users collection name was not present, we can do nothing.
    if !users {
        resp.WriteStatus(400)
        resp.WriteMessage("incomplete URL")
        return
    }

    // If the name wasn't part of the path, the Request
    // is for all names.
    if name == "" {
        @text {
            for k, _ := range names {
                resp.Write(fmt.Sprintf("%s", k))
            }
        }
        @json {
            list := make([]string, 0)
            for k, _ := range names {
                list = append(list, k)
            }
            b, _ := json.MarshalIndented(list)
            resp.Write(b)
        }
        return
    }

    // If is for a specific name, so get that information. If it doesn't
    // exist then complain.
    info, found := names[name]
    if !found {
        resp.WriteStatus(404)
        resp.WriteMessage("No such name as " + name)
    } else {

        // Based on the item name, return the desired info.
        switch item {
        case "":
            @text  resp.Write(fmt.Sprintf("%v", info))
            @json  resp.WriteJSON(info)

        case "age":
            resp.Write(string(info.age))

        case "gender":
            @text resp.Write(info.gender)
            @json resp.WriteJSON(info.gender)

        default:
            resp.WriteStatus(400)
            resp.WriteMessage("Invalid field selector " + item)
        }
    }
}