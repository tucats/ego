// Sample service. This illustrates using a collection-style URI
// path, of the form shown in the @endpoint directive. Note that the
// endpoint directive must be the first statement in the source file.
//
//  If name and field are omitted, it lists the possible users.
//  If field is omitted, it lists all info about a specific user.
//  If field is given, it lists the specific field for the specific user.
@endpoint "GET /services/sample/users/{{name}}/{{field}}"

import "http"

func handler( req http.Request, w http.ResponseWriter) {
    // Construct some sample data.
    type person struct {
        age    int 
        gender string 

    }

    names := map[string]person{
            "tom": {age: 51, gender:"M"},
            "mary": {age:47, gender:"F"},
    }

    // If the users collection name was not present, we can do nothing.
    if !bool(req.URL.Parts["users"]) {
        w.WriteHeader(400)
        w.WriteMessage("incomplete URL")
        return
    }

    // If the name wasn't part of the path, the Request
    // is for all names. Here, we have content-type-specific
    // blocks for text vs json, as the text is formatted as
    // a list of names separated by newline, and the JSON is 
    // an array formed from the list of key names.
    name := req.URL.Parts["name"]
    if name == "" {
        list := make([]string, 0)
        for  k := range names {
            list = append(list, k)
        }

        text := strings.Join(list, ", ")
        w.Write([]byte(text))

        return
    }

    // If is for a specific name, so get that information. If it doesn't
    // exist then complain.
    info, found := names[name]
    if !found {
        w.WriteHeader(404)
        w.WriteMessage("No such name as " + name)
    } else {

        // Based on the item name, return the desired info. Here we don't need
        // a media-specific writer, we can just send the value to Write() and 
        // it will be either a json object or formatted text.
        item := req.URL.Parts["field"] 
        switch item {
        case "":
            w.Write([]byte(string(info)))

        case "age":
            w.Write([]byte(string(info.age)))

        case "gender":
            w.Write([]byte(info.gender))

        default:
            w.WriteHeader(400)
            w.WriteMessage("Invalid field selector " + item)
        }
    }
}