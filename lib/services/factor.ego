// /services/factor
//
// Simple demonstration web service that parses a value from the
// URL given and returns a list of the integer factors of that
// numeric value.
//
// There is no authentication required for this request.
//
// Status codes:
//    200    The body of the resp is a string with the array
//           of integers
//    400    The request was invalid (usually due to a bad integer
//           expression in the URL). The body of the resp is the
//           text of the error.

@endpoint "GET /services/factor/{{value}}"

import "http"
import "math"

func handler( req http.Request, w http.ResponseWriter) {
    // The @endpoint above means that the part of the URL where
    // the value is found is stored in a struct in the request.
    // If the value string is empty, it was not present. Complain.
    value := req.URL.Parts["value"]

    if value == "" {
        if req.IsJSON {
            w.Header().Add("Content-Type", "application/json")
        }

        w.WriteHeader(http.StatusBadRequest)
        w.Write( "Missing integer to factor" )

        return
    }

    // Convert the value to an integer and get the list of factors.
    v , err := strconv.Atoi(value)
    if err != nil {
        if req.IsJSON {
            w.Header().Add("Content-Type", "application/json")
        }

        w.WriteHeader(http.StatusBadRequest)
        w.Write(fmt.Sprintf("invalid integer value: %s", value))

        return
    }

    r := math.Factor(int(value))

    // Return a success status and the factors.
    w.WriteHeader(200)

    if req.IsJSON {
        w.Header().Add("Content-Type", "application/json")
    }

    w.Write(r)
}
