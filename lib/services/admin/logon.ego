/*
 * Log on to the server. Requires username and password via the authentication
 * headers, and returns an encrypted token that can be used for subsequent
 * authorization operations.
 */

import "http"

func handler(req http.Request, resp http.Response ) {
    // Is there another auth server we should refer this to? If so,
    // this is an error.
    if auth := profile.Get("ego.server.authority"); auth != "" {
        resp.WriteStatus(301)
        resp.WriteHeader(auth + "/services/admin/logon")

        return
    }

// Can only proceed if authenticated with username
    @authenticated user

// Generate a token and return it as text to the caller
    token := cipher.New(_user, "")
    duration, e = time.ParseDuration(profile.Get("ego.server.token.expiration"))
    if e != nil {
        duration, _ = time.ParseDuration("24h")
    }
    
    payload := {
        "server": {
            "name": os.Hostname(),
            "id": _server_instance,
            "api": 1,
            "session": _session,
        },
        "token":token, 
        "expires": time.Now().Add(duration).String(),
        "identity": _user,
        }

    @json {
        resp.Write(payload)
    }

    @text {
        resp.Write(token)
    }
    
    resp.WriteStatus(http.StatusOK)

    return
}
