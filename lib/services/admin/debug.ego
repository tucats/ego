/* Debugging service. This reports server status */
import "http"


func handler(req http.Request, response http.Response) {
    @authenticated user 
    
    // If we got additional info in the path, we can't process it.
    @url "/{{extra}}/"
    if extra != "" {
        response.WriteStatus(http.StatusBadRequest)
        response.Write("Unsupported URL suffix " + extra)
        return 
    }

    // This block runs if the caller asks for JSON data
    @json {
        r := {}  // Needs to be an anonymous struct so we can arbitrarily
                // add fields.
        r.valid_user  = authenticated()
        r.version     = _version
        r.token_valid = _token_valid
        r.session     = _session 
        r.time        = time.Now().String()

        m := util.Memory()
        r.memory         = {}
        r.memory.current = m.current
        r.memory.gc      = m.gc
        r.memory.system  = m.system
        r.memory.total   = m.total

        if _token_valid {
            // If the token was valid, get some additional info about the user it represents
            t := cipher.Token(_token)
            r.user = t.name
            r.data = t.data
            r.superuser = getuser(t.name).superuser
        }

        // If there was a body, this was a POST so return the body as
        // a real value.
        if _body != "" {
            r.posted = json.Unmarshal(_body)
        }

        response.Write( r )
    }

// This block only runs when the caller asks for text.
    @text {
        r := `
Healthy %s mode at %s
    version %s,
    user    %s,
    session %s,

Request:
    Authentication %s 
    Body           %s 
    Endpoint       %s 
    Headers        %v 
    Media          %s 
    Method         %s 
    Parameters     %v 
    URL            %s 
    User           %s
    Userdata       %v

Memory usage:
    Current  %3.3fmb
    Total    %3.3fmb
    System   %3.3fmb
    NumGC    %d    
`
        m := util.Memory()

        response.Write( fmt.Sprintf(r, util.Mode(), time.Now().String(), _version, _user, _session,
                            req.Authentication,
                            req.Body,
                            req.Endpoint,
                            req.Headers,
                            req.Media,
                            req.Method,
                            req.Parameters,
                            req.Url,
                            req.Username,
                            getuser(req.Username),
                            m.current, m.total, m.system, m.gc))
    }
}