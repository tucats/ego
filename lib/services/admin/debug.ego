/* Debugging service. This reports server status */
@endpoint "GET /services/admin/debug"

import "http"


func handler(req http.Request, response http.Response) {
    @authenticated user 

    // This block runs if the caller asks for JSON data
    @json {
        r := {}  // Needs to be an anonymous struct so we can arbitrarily
                // add fields.
        r.valid_user  = authenticated()
        r.version     = _version
        r.token_valid = _token_valid
        r.session     = _server_instance 
        r.time        = time.Now().String()
        r.request     = req
        m := util.Memory()
        r.memory         = {}
        r.memory.current = m.Current
        r.memory.gc      = m.GC
        r.memory.system  = m.System
        r.memory.total   = m.Total

        if authenticated() {
            r.userinfo = getuser(_user)
        }

        if _token_valid {
            // If the token was valid, get some additional info about the user it represents
            t := cipher.Token(_token)
            r.user = t.name
            r.data = t.data
            r.userinfo = getuser(_user)
        }

        // If there was a body, this was a POST so return the body as
        // a real value.
        if _body != "" {
            r.posted = json.Unmarshal(_body)
        }

        response.Write( r )
    }

// This block only runs when the caller asks for text.
    @text {
        r := `
Healthy %s mode at %s
    version %s,
    user    %s,
    session %s,

Request:
    Authentication %s 
    Body           %s 
    Endpoint       %s 
    Headers        %v 
    Media          %s 
    Method         %s 
    Parameters     %v 
    Superuser      %v
    URL            %s 
    User           %s
    Userdata       %v

Memory usage:
    Current  %3.3fmb
    Total    %3.3fmb
    System   %3.3fmb
    NumGC    %d    
`
        m := util.Memory()

        response.Write( fmt.Sprintf(r, util.Mode(), time.Now().String(), _version, _user, _server_instance,
                            req.Authentication,
                            req.Body,
                            req.Endpoint,
                            req.Headers,
                            req.Media,
                            req.Method,
                            req.Parameters,
                            req.IsAdmin,
                            req.URL,
                            req.Username,
                            getuser(req.Username),
                            m.Current, m.Total, m.System, m.GC))
    }
}