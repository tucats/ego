/*
 * Return last n lines of the log, expressed as ?tail=n in the URL. Can also
 * filter by a specific session with ?session=n.  The types of the values that
 * are permitted for these options is specified in the endpoint string below.
 * The endpoint also specifies that GET is the only method this endpoint supports.
 */
 @endpoint "GET /services/admin/log/?session=int&tail=int"

import "http"

func handler(req http.Request, resp http.Response ) {
// Can only proceed if authenticated with as administrator. Also, let's
// be sure that language extensions are working so we can use the "try"
// statement.
    @authenticated admin
    @extensions

    // Default is all sessions, but if one was provided as a parameter use it.
    session := 0
    if sessions, found := req.Parameters["session"]; found {
        session = sessions[0]
    }

    // Default is 50 lines of log, but if a parameter provided, use it.
    count := "50"
    if counts, found := req.Parameters["tail"]; found {
        count = counts[0]
    } 

    n, err := strconv.Atoi(count)
    if err != nil {
        resp.WriteStatus(400)
        resp.WriteMessage("Bad line count: " + count)
        return
    }

    if n < 1 {
        n = 50
    }
    
    var lines []string

    try {
        lines = util.Log(n, session)
    } catch(e) {
        resp.WriteStatus(500)
        resp.WriteMessage(e)

        return
    }

    resp.WriteStatus(200)

    @text {
        for _, line := range lines {
            resp.Write(line)
        }
    }

    @json {
        reply := {
            server: {
                api: 1,
                session: _session,
                id: _server_instance,
                name: os.Hostname(),
            },
            lines: lines,
        }

        resp.Write(reply)
    }

    return
}
