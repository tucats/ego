package cipher

func token(user) string {
    token := {user:user, id:util.uuid()}

    // Add in a duration after which the token is invalid
    duration := util.profile("token-expiration")
    if duration == "" {
        duration = "15m"
    }
    token.expiration = time.add(time.now(), duration)

    // Cryptographically sign the token
    htoken := string(token)
    hash := cipher.hash(htoken)
    token.hash = hash

    // Return the token as an encrypted string.
    return cipher.encrypt(string(token), util.profile("token-key"))
}

func valid(s) bool {

    // Decrypt the token string.
    ts := ""
    try {
        ts = cipher.decrypt(s, util.profile("token-key"))
    } catch {
        return false
    }

    // If it could be decrypted, it was from us so it's a valid format. Convert
    // into a real structure.
    token := eval(ts)

    // See if the token is expired
    delta := time.subtract(token.expiration, time.now())
    if strings.left(delta,1) == "-" {
        return false
    }

    // Reform the cryptographic hash and verify it hasn't changed either.
    t := {user:token.user, id:token.id, expiration:token.expiration}
    htoken := string(t) 
    hash := cipher.hash(htoken)
    return token.hash == hash
}


func getuser(s) string {

    ts := ""
    try {
        ts = cipher.decrypt(s, util.profile("token-key"))
    } catch {
        return false
    }
    token := eval(ts)

    delta := time.subtract(token.expiration, time.now())
    if strings.left(delta,1) == "-" {
        return false
    }

    t := {user:token.user, id:token.id, expiration:token.expiration}
    htoken := string(t) 
    hash := cipher.hash(htoken)

    r := ""
    if token.hash == hash {
        r = t.user
    }
    return r
}
