package http

import "filepath"
import "json"
import "profile"

// The Request object passed to each handler. This contains all the known information about the
// request and the call as presented by the Ego server REST handler.
type Request struct {
    Method         string
    URL            struct {
                        Path  string
                        Parts map[string]interface{}
                    }
    Endpoint       string
    Media          string
    Headers        map[string][]string 
    Parameters     map[string][]string
    Authentication string
    Authenticated  bool
    IsAdmin        bool
    Username       string
    Body           string
}

// This is an abstraction of the Response that will be returned to the caller via the Ego 
// rest handler. It includes an HTTP status, the text of the response buffer, and any 
// headers to set in the response.
type Response struct {
	Status         int
	Buffer         string
    Headers        map[string][]string 
}

// Set the status value for the response to the given integer value.
func (r *Response) WriteStatus(status int) {
	@status status
}

// Wrtie an arbitrary object to the response buffer.
func (r *Response) Write(item interface{}) {
	@response item
}

// Write a given string as a value in the named header. If the header already exists, this
// value is added to the header values for the response.
func (r *Response) WriteHeader(name string, item string) {
    @respheader name item
}

// Write an arbitrary string message to the response. If the output format 
// is expected to be JSON, the message is wrapped in a JSON object with a 
// single "message" field containing the object text.
func (r *Response) WriteMessage(msg string) {
    @text {
        @response msg
    }
    @json {
        m := {message: msg}
        @response m
    }
}

// Write whatever is passed in to the response as a JSON-formatted string.
func (r *Response) WriteJSON( i interface{}) {
	msg := json.Marshal(i)
	r.Write(string(msg))
}

// Write a page using a named template. The argument can be either a struct
// or a map that contains values to be plugged into the template, so it is 
// specified as an interface{} parameter.
func (r *Response) WriteTemplate( fn string, i interface{}) {
    @extensions
    try {
        // Load the page file as a template.
        fn := filepath.Join(profile.Get("ego.runtime.path"), fn)
        b := os.ReadFile(fn)
        @template mempage string(b)

        // Render the page using the dynamic data, and return it as the response
        page := strings.Template(mempage, i)
        r.Write(page)
    } catch(e) {
        r.WriteStatus(500)
        r.WriteMessage(e.Error())
    }
}


// Helper function to geenerate an error indicating the URL was unusable. this
// call can be generated by the @URL directive.
func BadURL(url string) {
    @status 400
    @response "Unrecognized URI path " + url
}

// Generate a new empty response object. The default status is succcess.
func NewResponse() Response {
	r := Response{
		Status:   200,
	}

	return r
}

// Generate a new request object. The values are filled in from the hidden readonly
// values created by the URL handler in the native Ego server. This moves them to a 
// more organized structure, and allows the specific variables/values to be hidden 
// from the Ego service.
func NewRequest() Request {
    r := Request{
        URL: {
            Path:  _url,
            Parts: _urlparts,
        },
        Endpoint:        _path_endpoint,
        Headers:         _headers,
        Parameters:      _parms,
        Method:          _method,
        Body:            _body,
        Username:        _user,
        IsAdmin:         _superuser,
        Authenticated:   _authenticated,
    }

    if _json {
        r.Media = "json"
    } else {
        r.Media = "text"
    }

    if _authenticated {
        if _token == "" {
            r.Authentication = "basic"
            r.Username = _user
        } else {
            r.Authentication = "token"
            r.Username = _user
        }
    } else {
        r.Authentication = "none"
    }

    return r
}
